/*
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.palladiosimulator.somox.docker.ide.contentassist.antlr.internal.InternalDockerFileParser;
import org.palladiosimulator.somox.docker.services.DockerFileGrammarAccess;

public class DockerFileParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DockerFileGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DockerFileGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getCmdAccess().getAlternatives_1(), "rule__Cmd__Alternatives_1");
			builder.put(grammarAccess.getCopyAccess().getAlternatives_1(), "rule__Copy__Alternatives_1");
			builder.put(grammarAccess.getEntrypointAccess().getAlternatives_1(), "rule__Entrypoint__Alternatives_1");
			builder.put(grammarAccess.getVolumeAccess().getAlternatives_1(), "rule__Volume__Alternatives_1");
			builder.put(grammarAccess.getEnvAccess().getAlternatives_1(), "rule__Env__Alternatives_1");
			builder.put(grammarAccess.getAddSourceAccess().getAlternatives(), "rule__AddSource__Alternatives");
			builder.put(grammarAccess.getRunAccess().getAlternatives(), "rule__Run__Alternatives");
			builder.put(grammarAccess.getVALID_URLAccess().getAlternatives_2_0(), "rule__VALID_URL__Alternatives_2_0");
			builder.put(grammarAccess.getINT_PREFIXED_BY_SPACEAccess().getAlternatives_1(), "rule__INT_PREFIXED_BY_SPACE__Alternatives_1");
			builder.put(grammarAccess.getVALID_IMAGE_TAGAccess().getAlternatives_0(), "rule__VALID_IMAGE_TAG__Alternatives_0");
			builder.put(grammarAccess.getVALID_IMAGE_TAGAccess().getAlternatives_1(), "rule__VALID_IMAGE_TAG__Alternatives_1");
			builder.put(grammarAccess.getCmdAccess().getGroup(), "rule__Cmd__Group__0");
			builder.put(grammarAccess.getCmdAccess().getGroup_1_1(), "rule__Cmd__Group_1_1__0");
			builder.put(grammarAccess.getCopyAccess().getGroup(), "rule__Copy__Group__0");
			builder.put(grammarAccess.getCopyAccess().getGroup_1_1(), "rule__Copy__Group_1_1__0");
			builder.put(grammarAccess.getEntrypointAccess().getGroup(), "rule__Entrypoint__Group__0");
			builder.put(grammarAccess.getEntrypointAccess().getGroup_1_1(), "rule__Entrypoint__Group_1_1__0");
			builder.put(grammarAccess.getVolumeAccess().getGroup(), "rule__Volume__Group__0");
			builder.put(grammarAccess.getVolumeAccess().getGroup_1_1(), "rule__Volume__Group_1_1__0");
			builder.put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
			builder.put(grammarAccess.getOnbuildAccess().getGroup(), "rule__Onbuild__Group__0");
			builder.put(grammarAccess.getFromAccess().getGroup(), "rule__From__Group__0");
			builder.put(grammarAccess.getFromAccess().getGroup_2(), "rule__From__Group_2__0");
			builder.put(grammarAccess.getMaintainerAccess().getGroup(), "rule__Maintainer__Group__0");
			builder.put(grammarAccess.getEnvAccess().getGroup(), "rule__Env__Group__0");
			builder.put(grammarAccess.getExposeAccess().getGroup(), "rule__Expose__Group__0");
			builder.put(grammarAccess.getJSON_ARRAYAccess().getGroup(), "rule__JSON_ARRAY__Group__0");
			builder.put(grammarAccess.getEnvWithSpaceAccess().getGroup(), "rule__EnvWithSpace__Group__0");
			builder.put(grammarAccess.getEnvWithEqualAccess().getGroup(), "rule__EnvWithEqual__Group__0");
			builder.put(grammarAccess.getWorkdirAccess().getGroup(), "rule__Workdir__Group__0");
			builder.put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
			builder.put(grammarAccess.getRunAccess().getGroup_0(), "rule__Run__Group_0__0");
			builder.put(grammarAccess.getRunWithNoShellAccess().getGroup(), "rule__RunWithNoShell__Group__0");
			builder.put(grammarAccess.getSTRING_PREFIXED_WITH_COMMAAccess().getGroup(), "rule__STRING_PREFIXED_WITH_COMMA__Group__0");
			builder.put(grammarAccess.getVALID_RELATIVE_PATHAccess().getGroup(), "rule__VALID_RELATIVE_PATH__Group__0");
			builder.put(grammarAccess.getVALID_RELATIVE_PATHAccess().getGroup_0(), "rule__VALID_RELATIVE_PATH__Group_0__0");
			builder.put(grammarAccess.getVALID_RELATIVE_PATHAccess().getGroup_0_1(), "rule__VALID_RELATIVE_PATH__Group_0_1__0");
			builder.put(grammarAccess.getVALID_URLAccess().getGroup(), "rule__VALID_URL__Group__0");
			builder.put(grammarAccess.getVALID_URLAccess().getGroup_2(), "rule__VALID_URL__Group_2__0");
			builder.put(grammarAccess.getINT_PREFIXED_BY_SPACEAccess().getGroup(), "rule__INT_PREFIXED_BY_SPACE__Group__0");
			builder.put(grammarAccess.getVALID_IMAGE_NAMEAccess().getGroup(), "rule__VALID_IMAGE_NAME__Group__0");
			builder.put(grammarAccess.getVALID_IMAGE_NAMEAccess().getGroup_1(), "rule__VALID_IMAGE_NAME__Group_1__0");
			builder.put(grammarAccess.getVALID_IMAGE_TAGAccess().getGroup(), "rule__VALID_IMAGE_TAG__Group__0");
			builder.put(grammarAccess.getDockerfileAccess().getInstructionsAssignment(), "rule__Dockerfile__InstructionsAssignment");
			builder.put(grammarAccess.getCopyAccess().getSource_leftAssignment_1_1_0(), "rule__Copy__Source_leftAssignment_1_1_0");
			builder.put(grammarAccess.getCopyAccess().getDestAssignment_1_1_1(), "rule__Copy__DestAssignment_1_1_1");
			builder.put(grammarAccess.getUserAccess().getNameAssignment_1(), "rule__User__NameAssignment_1");
			builder.put(grammarAccess.getOnbuildAccess().getInstructionAssignment_1(), "rule__Onbuild__InstructionAssignment_1");
			builder.put(grammarAccess.getFromAccess().getNameAssignment_1(), "rule__From__NameAssignment_1");
			builder.put(grammarAccess.getFromAccess().getTagAssignment_2_1(), "rule__From__TagAssignment_2_1");
			builder.put(grammarAccess.getMaintainerAccess().getNameAssignment_1(), "rule__Maintainer__NameAssignment_1");
			builder.put(grammarAccess.getExposeAccess().getPortsAssignment_1(), "rule__Expose__PortsAssignment_1");
			builder.put(grammarAccess.getJSON_ARRAYAccess().getHeadAssignment_1(), "rule__JSON_ARRAY__HeadAssignment_1");
			builder.put(grammarAccess.getJSON_ARRAYAccess().getTailAssignment_2(), "rule__JSON_ARRAY__TailAssignment_2");
			builder.put(grammarAccess.getEnvWithSpaceAccess().getKeyAssignment_0(), "rule__EnvWithSpace__KeyAssignment_0");
			builder.put(grammarAccess.getEnvWithSpaceAccess().getValueAssignment_1(), "rule__EnvWithSpace__ValueAssignment_1");
			builder.put(grammarAccess.getEnvWithEqualAccess().getKeyAssignment_0(), "rule__EnvWithEqual__KeyAssignment_0");
			builder.put(grammarAccess.getEnvWithEqualAccess().getValueAssignment_1(), "rule__EnvWithEqual__ValueAssignment_1");
			builder.put(grammarAccess.getWorkdirAccess().getPathAssignment_1(), "rule__Workdir__PathAssignment_1");
			builder.put(grammarAccess.getAddAccess().getSource_leftAssignment_1(), "rule__Add__Source_leftAssignment_1");
			builder.put(grammarAccess.getAddAccess().getDestAssignment_2(), "rule__Add__DestAssignment_2");
			builder.put(grammarAccess.getRunWithShellAccess().getCommandAssignment(), "rule__RunWithShell__CommandAssignment");
			builder.put(grammarAccess.getRunWithNoShellAccess().getExecutableAssignment_1(), "rule__RunWithNoShell__ExecutableAssignment_1");
			builder.put(grammarAccess.getRunWithNoShellAccess().getParamsAssignment_2(), "rule__RunWithNoShell__ParamsAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DockerFileGrammarAccess grammarAccess;

	@Override
	protected InternalDockerFileParser createParser() {
		InternalDockerFileParser result = new InternalDockerFileParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DockerFileGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DockerFileGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
