/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.compose.composeFile.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.palladiosimulator.somox.docker.compose.composeFile.ComposeFilePackage;
import org.palladiosimulator.somox.docker.compose.composeFile.ServiceVolumeLongSyntax;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Service Volume Long Syntax</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getSource <em>Source</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getRead_only <em>Read only</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getConsistency <em>Consistency</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getBindPropagation <em>Bind Propagation</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getVolumeNocopy <em>Volume Nocopy</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.ServiceVolumeLongSyntaxImpl#getTmpfsSize <em>Tmpfs Size</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ServiceVolumeLongSyntaxImpl extends ServiceVolumesImpl implements ServiceVolumeLongSyntax
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected static final String SOURCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected String source = SOURCE_EDEFAULT;

  /**
   * The default value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected static final String TARGET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected String target = TARGET_EDEFAULT;

  /**
   * The default value of the '{@link #getRead_only() <em>Read only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRead_only()
   * @generated
   * @ordered
   */
  protected static final String READ_ONLY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRead_only() <em>Read only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRead_only()
   * @generated
   * @ordered
   */
  protected String read_only = READ_ONLY_EDEFAULT;

  /**
   * The default value of the '{@link #getConsistency() <em>Consistency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsistency()
   * @generated
   * @ordered
   */
  protected static final String CONSISTENCY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConsistency() <em>Consistency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsistency()
   * @generated
   * @ordered
   */
  protected String consistency = CONSISTENCY_EDEFAULT;

  /**
   * The default value of the '{@link #getBindPropagation() <em>Bind Propagation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindPropagation()
   * @generated
   * @ordered
   */
  protected static final String BIND_PROPAGATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBindPropagation() <em>Bind Propagation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindPropagation()
   * @generated
   * @ordered
   */
  protected String bindPropagation = BIND_PROPAGATION_EDEFAULT;

  /**
   * The default value of the '{@link #getVolumeNocopy() <em>Volume Nocopy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVolumeNocopy()
   * @generated
   * @ordered
   */
  protected static final String VOLUME_NOCOPY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVolumeNocopy() <em>Volume Nocopy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVolumeNocopy()
   * @generated
   * @ordered
   */
  protected String volumeNocopy = VOLUME_NOCOPY_EDEFAULT;

  /**
   * The default value of the '{@link #getTmpfsSize() <em>Tmpfs Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTmpfsSize()
   * @generated
   * @ordered
   */
  protected static final String TMPFS_SIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTmpfsSize() <em>Tmpfs Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTmpfsSize()
   * @generated
   * @ordered
   */
  protected String tmpfsSize = TMPFS_SIZE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceVolumeLongSyntaxImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ComposeFilePackage.Literals.SERVICE_VOLUME_LONG_SYNTAX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(String newSource)
  {
    String oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(String newTarget)
  {
    String oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRead_only()
  {
    return read_only;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRead_only(String newRead_only)
  {
    String oldRead_only = read_only;
    read_only = newRead_only;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__READ_ONLY, oldRead_only, read_only));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConsistency()
  {
    return consistency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConsistency(String newConsistency)
  {
    String oldConsistency = consistency;
    consistency = newConsistency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__CONSISTENCY, oldConsistency, consistency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBindPropagation()
  {
    return bindPropagation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBindPropagation(String newBindPropagation)
  {
    String oldBindPropagation = bindPropagation;
    bindPropagation = newBindPropagation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__BIND_PROPAGATION, oldBindPropagation, bindPropagation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVolumeNocopy()
  {
    return volumeNocopy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVolumeNocopy(String newVolumeNocopy)
  {
    String oldVolumeNocopy = volumeNocopy;
    volumeNocopy = newVolumeNocopy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__VOLUME_NOCOPY, oldVolumeNocopy, volumeNocopy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTmpfsSize()
  {
    return tmpfsSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTmpfsSize(String newTmpfsSize)
  {
    String oldTmpfsSize = tmpfsSize;
    tmpfsSize = newTmpfsSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TMPFS_SIZE, oldTmpfsSize, tmpfsSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TYPE:
        return getType();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__SOURCE:
        return getSource();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TARGET:
        return getTarget();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__READ_ONLY:
        return getRead_only();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__CONSISTENCY:
        return getConsistency();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__BIND_PROPAGATION:
        return getBindPropagation();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__VOLUME_NOCOPY:
        return getVolumeNocopy();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TMPFS_SIZE:
        return getTmpfsSize();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TYPE:
        setType((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__SOURCE:
        setSource((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TARGET:
        setTarget((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__READ_ONLY:
        setRead_only((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__CONSISTENCY:
        setConsistency((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__BIND_PROPAGATION:
        setBindPropagation((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__VOLUME_NOCOPY:
        setVolumeNocopy((String)newValue);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TMPFS_SIZE:
        setTmpfsSize((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__SOURCE:
        setSource(SOURCE_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TARGET:
        setTarget(TARGET_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__READ_ONLY:
        setRead_only(READ_ONLY_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__CONSISTENCY:
        setConsistency(CONSISTENCY_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__BIND_PROPAGATION:
        setBindPropagation(BIND_PROPAGATION_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__VOLUME_NOCOPY:
        setVolumeNocopy(VOLUME_NOCOPY_EDEFAULT);
        return;
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TMPFS_SIZE:
        setTmpfsSize(TMPFS_SIZE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__SOURCE:
        return SOURCE_EDEFAULT == null ? source != null : !SOURCE_EDEFAULT.equals(source);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TARGET:
        return TARGET_EDEFAULT == null ? target != null : !TARGET_EDEFAULT.equals(target);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__READ_ONLY:
        return READ_ONLY_EDEFAULT == null ? read_only != null : !READ_ONLY_EDEFAULT.equals(read_only);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__CONSISTENCY:
        return CONSISTENCY_EDEFAULT == null ? consistency != null : !CONSISTENCY_EDEFAULT.equals(consistency);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__BIND_PROPAGATION:
        return BIND_PROPAGATION_EDEFAULT == null ? bindPropagation != null : !BIND_PROPAGATION_EDEFAULT.equals(bindPropagation);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__VOLUME_NOCOPY:
        return VOLUME_NOCOPY_EDEFAULT == null ? volumeNocopy != null : !VOLUME_NOCOPY_EDEFAULT.equals(volumeNocopy);
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX__TMPFS_SIZE:
        return TMPFS_SIZE_EDEFAULT == null ? tmpfsSize != null : !TMPFS_SIZE_EDEFAULT.equals(tmpfsSize);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", source: ");
    result.append(source);
    result.append(", target: ");
    result.append(target);
    result.append(", read_only: ");
    result.append(read_only);
    result.append(", consistency: ");
    result.append(consistency);
    result.append(", bindPropagation: ");
    result.append(bindPropagation);
    result.append(", volumeNocopy: ");
    result.append(volumeNocopy);
    result.append(", tmpfsSize: ");
    result.append(tmpfsSize);
    result.append(')');
    return result.toString();
  }

} //ServiceVolumeLongSyntaxImpl
