/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.compose.composeFile.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.palladiosimulator.somox.docker.compose.composeFile.ComposeFilePackage;
import org.palladiosimulator.somox.docker.compose.composeFile.Configs;
import org.palladiosimulator.somox.docker.compose.composeFile.DockerCompose;
import org.palladiosimulator.somox.docker.compose.composeFile.Networks;
import org.palladiosimulator.somox.docker.compose.composeFile.Secrets;
import org.palladiosimulator.somox.docker.compose.composeFile.Service;
import org.palladiosimulator.somox.docker.compose.composeFile.Volumes;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Docker Compose</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.DockerComposeImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.DockerComposeImpl#getServices <em>Services</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.DockerComposeImpl#getVolumes <em>Volumes</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.DockerComposeImpl#getNetworks <em>Networks</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.DockerComposeImpl#getConfigs <em>Configs</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.DockerComposeImpl#getSecrets <em>Secrets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DockerComposeImpl extends MinimalEObjectImpl.Container implements DockerCompose
{
  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getServices() <em>Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServices()
   * @generated
   * @ordered
   */
  protected EList<Service> services;

  /**
   * The cached value of the '{@link #getVolumes() <em>Volumes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVolumes()
   * @generated
   * @ordered
   */
  protected EList<Volumes> volumes;

  /**
   * The cached value of the '{@link #getNetworks() <em>Networks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNetworks()
   * @generated
   * @ordered
   */
  protected EList<Networks> networks;

  /**
   * The cached value of the '{@link #getConfigs() <em>Configs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigs()
   * @generated
   * @ordered
   */
  protected EList<Configs> configs;

  /**
   * The cached value of the '{@link #getSecrets() <em>Secrets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecrets()
   * @generated
   * @ordered
   */
  protected EList<Secrets> secrets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DockerComposeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ComposeFilePackage.Literals.DOCKER_COMPOSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.DOCKER_COMPOSE__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getServices()
  {
    if (services == null)
    {
      services = new EObjectContainmentEList<Service>(Service.class, this, ComposeFilePackage.DOCKER_COMPOSE__SERVICES);
    }
    return services;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Volumes> getVolumes()
  {
    if (volumes == null)
    {
      volumes = new EObjectContainmentEList<Volumes>(Volumes.class, this, ComposeFilePackage.DOCKER_COMPOSE__VOLUMES);
    }
    return volumes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Networks> getNetworks()
  {
    if (networks == null)
    {
      networks = new EObjectContainmentEList<Networks>(Networks.class, this, ComposeFilePackage.DOCKER_COMPOSE__NETWORKS);
    }
    return networks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Configs> getConfigs()
  {
    if (configs == null)
    {
      configs = new EObjectContainmentEList<Configs>(Configs.class, this, ComposeFilePackage.DOCKER_COMPOSE__CONFIGS);
    }
    return configs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Secrets> getSecrets()
  {
    if (secrets == null)
    {
      secrets = new EObjectContainmentEList<Secrets>(Secrets.class, this, ComposeFilePackage.DOCKER_COMPOSE__SECRETS);
    }
    return secrets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ComposeFilePackage.DOCKER_COMPOSE__SERVICES:
        return ((InternalEList<?>)getServices()).basicRemove(otherEnd, msgs);
      case ComposeFilePackage.DOCKER_COMPOSE__VOLUMES:
        return ((InternalEList<?>)getVolumes()).basicRemove(otherEnd, msgs);
      case ComposeFilePackage.DOCKER_COMPOSE__NETWORKS:
        return ((InternalEList<?>)getNetworks()).basicRemove(otherEnd, msgs);
      case ComposeFilePackage.DOCKER_COMPOSE__CONFIGS:
        return ((InternalEList<?>)getConfigs()).basicRemove(otherEnd, msgs);
      case ComposeFilePackage.DOCKER_COMPOSE__SECRETS:
        return ((InternalEList<?>)getSecrets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ComposeFilePackage.DOCKER_COMPOSE__VERSION:
        return getVersion();
      case ComposeFilePackage.DOCKER_COMPOSE__SERVICES:
        return getServices();
      case ComposeFilePackage.DOCKER_COMPOSE__VOLUMES:
        return getVolumes();
      case ComposeFilePackage.DOCKER_COMPOSE__NETWORKS:
        return getNetworks();
      case ComposeFilePackage.DOCKER_COMPOSE__CONFIGS:
        return getConfigs();
      case ComposeFilePackage.DOCKER_COMPOSE__SECRETS:
        return getSecrets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ComposeFilePackage.DOCKER_COMPOSE__VERSION:
        setVersion((String)newValue);
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__SERVICES:
        getServices().clear();
        getServices().addAll((Collection<? extends Service>)newValue);
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__VOLUMES:
        getVolumes().clear();
        getVolumes().addAll((Collection<? extends Volumes>)newValue);
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__NETWORKS:
        getNetworks().clear();
        getNetworks().addAll((Collection<? extends Networks>)newValue);
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__CONFIGS:
        getConfigs().clear();
        getConfigs().addAll((Collection<? extends Configs>)newValue);
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__SECRETS:
        getSecrets().clear();
        getSecrets().addAll((Collection<? extends Secrets>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ComposeFilePackage.DOCKER_COMPOSE__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__SERVICES:
        getServices().clear();
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__VOLUMES:
        getVolumes().clear();
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__NETWORKS:
        getNetworks().clear();
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__CONFIGS:
        getConfigs().clear();
        return;
      case ComposeFilePackage.DOCKER_COMPOSE__SECRETS:
        getSecrets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ComposeFilePackage.DOCKER_COMPOSE__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case ComposeFilePackage.DOCKER_COMPOSE__SERVICES:
        return services != null && !services.isEmpty();
      case ComposeFilePackage.DOCKER_COMPOSE__VOLUMES:
        return volumes != null && !volumes.isEmpty();
      case ComposeFilePackage.DOCKER_COMPOSE__NETWORKS:
        return networks != null && !networks.isEmpty();
      case ComposeFilePackage.DOCKER_COMPOSE__CONFIGS:
        return configs != null && !configs.isEmpty();
      case ComposeFilePackage.DOCKER_COMPOSE__SECRETS:
        return secrets != null && !secrets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (version: ");
    result.append(version);
    result.append(')');
    return result.toString();
  }

} //DockerComposeImpl
