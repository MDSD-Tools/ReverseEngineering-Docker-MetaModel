/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.compose.composeFile.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.palladiosimulator.somox.docker.compose.composeFile.ComposeFilePackage;
import org.palladiosimulator.somox.docker.compose.composeFile.ListOrMapping;
import org.palladiosimulator.somox.docker.compose.composeFile.Mapping;
import org.palladiosimulator.somox.docker.compose.composeFile.Volumes;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Volumes</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.VolumesImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.VolumesImpl#getDriver <em>Driver</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.VolumesImpl#getDriver_opts <em>Driver opts</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.VolumesImpl#getExternal <em>External</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.VolumesImpl#getLabels <em>Labels</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.compose.composeFile.impl.VolumesImpl#getCustomName <em>Custom Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VolumesImpl extends MinimalEObjectImpl.Container implements Volumes
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDriver() <em>Driver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDriver()
   * @generated
   * @ordered
   */
  protected static final String DRIVER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDriver() <em>Driver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDriver()
   * @generated
   * @ordered
   */
  protected String driver = DRIVER_EDEFAULT;

  /**
   * The cached value of the '{@link #getDriver_opts() <em>Driver opts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDriver_opts()
   * @generated
   * @ordered
   */
  protected Mapping driver_opts;

  /**
   * The default value of the '{@link #getExternal() <em>External</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternal()
   * @generated
   * @ordered
   */
  protected static final String EXTERNAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExternal() <em>External</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternal()
   * @generated
   * @ordered
   */
  protected String external = EXTERNAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getLabels() <em>Labels</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabels()
   * @generated
   * @ordered
   */
  protected ListOrMapping labels;

  /**
   * The default value of the '{@link #getCustomName() <em>Custom Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCustomName()
   * @generated
   * @ordered
   */
  protected static final String CUSTOM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCustomName() <em>Custom Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCustomName()
   * @generated
   * @ordered
   */
  protected String customName = CUSTOM_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VolumesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ComposeFilePackage.Literals.VOLUMES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDriver()
  {
    return driver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDriver(String newDriver)
  {
    String oldDriver = driver;
    driver = newDriver;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__DRIVER, oldDriver, driver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping getDriver_opts()
  {
    return driver_opts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDriver_opts(Mapping newDriver_opts, NotificationChain msgs)
  {
    Mapping oldDriver_opts = driver_opts;
    driver_opts = newDriver_opts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__DRIVER_OPTS, oldDriver_opts, newDriver_opts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDriver_opts(Mapping newDriver_opts)
  {
    if (newDriver_opts != driver_opts)
    {
      NotificationChain msgs = null;
      if (driver_opts != null)
        msgs = ((InternalEObject)driver_opts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ComposeFilePackage.VOLUMES__DRIVER_OPTS, null, msgs);
      if (newDriver_opts != null)
        msgs = ((InternalEObject)newDriver_opts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ComposeFilePackage.VOLUMES__DRIVER_OPTS, null, msgs);
      msgs = basicSetDriver_opts(newDriver_opts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__DRIVER_OPTS, newDriver_opts, newDriver_opts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExternal()
  {
    return external;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExternal(String newExternal)
  {
    String oldExternal = external;
    external = newExternal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__EXTERNAL, oldExternal, external));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListOrMapping getLabels()
  {
    return labels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabels(ListOrMapping newLabels, NotificationChain msgs)
  {
    ListOrMapping oldLabels = labels;
    labels = newLabels;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__LABELS, oldLabels, newLabels);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabels(ListOrMapping newLabels)
  {
    if (newLabels != labels)
    {
      NotificationChain msgs = null;
      if (labels != null)
        msgs = ((InternalEObject)labels).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ComposeFilePackage.VOLUMES__LABELS, null, msgs);
      if (newLabels != null)
        msgs = ((InternalEObject)newLabels).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ComposeFilePackage.VOLUMES__LABELS, null, msgs);
      msgs = basicSetLabels(newLabels, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__LABELS, newLabels, newLabels));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCustomName()
  {
    return customName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCustomName(String newCustomName)
  {
    String oldCustomName = customName;
    customName = newCustomName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComposeFilePackage.VOLUMES__CUSTOM_NAME, oldCustomName, customName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ComposeFilePackage.VOLUMES__DRIVER_OPTS:
        return basicSetDriver_opts(null, msgs);
      case ComposeFilePackage.VOLUMES__LABELS:
        return basicSetLabels(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ComposeFilePackage.VOLUMES__NAME:
        return getName();
      case ComposeFilePackage.VOLUMES__DRIVER:
        return getDriver();
      case ComposeFilePackage.VOLUMES__DRIVER_OPTS:
        return getDriver_opts();
      case ComposeFilePackage.VOLUMES__EXTERNAL:
        return getExternal();
      case ComposeFilePackage.VOLUMES__LABELS:
        return getLabels();
      case ComposeFilePackage.VOLUMES__CUSTOM_NAME:
        return getCustomName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ComposeFilePackage.VOLUMES__NAME:
        setName((String)newValue);
        return;
      case ComposeFilePackage.VOLUMES__DRIVER:
        setDriver((String)newValue);
        return;
      case ComposeFilePackage.VOLUMES__DRIVER_OPTS:
        setDriver_opts((Mapping)newValue);
        return;
      case ComposeFilePackage.VOLUMES__EXTERNAL:
        setExternal((String)newValue);
        return;
      case ComposeFilePackage.VOLUMES__LABELS:
        setLabels((ListOrMapping)newValue);
        return;
      case ComposeFilePackage.VOLUMES__CUSTOM_NAME:
        setCustomName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ComposeFilePackage.VOLUMES__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ComposeFilePackage.VOLUMES__DRIVER:
        setDriver(DRIVER_EDEFAULT);
        return;
      case ComposeFilePackage.VOLUMES__DRIVER_OPTS:
        setDriver_opts((Mapping)null);
        return;
      case ComposeFilePackage.VOLUMES__EXTERNAL:
        setExternal(EXTERNAL_EDEFAULT);
        return;
      case ComposeFilePackage.VOLUMES__LABELS:
        setLabels((ListOrMapping)null);
        return;
      case ComposeFilePackage.VOLUMES__CUSTOM_NAME:
        setCustomName(CUSTOM_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ComposeFilePackage.VOLUMES__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ComposeFilePackage.VOLUMES__DRIVER:
        return DRIVER_EDEFAULT == null ? driver != null : !DRIVER_EDEFAULT.equals(driver);
      case ComposeFilePackage.VOLUMES__DRIVER_OPTS:
        return driver_opts != null;
      case ComposeFilePackage.VOLUMES__EXTERNAL:
        return EXTERNAL_EDEFAULT == null ? external != null : !EXTERNAL_EDEFAULT.equals(external);
      case ComposeFilePackage.VOLUMES__LABELS:
        return labels != null;
      case ComposeFilePackage.VOLUMES__CUSTOM_NAME:
        return CUSTOM_NAME_EDEFAULT == null ? customName != null : !CUSTOM_NAME_EDEFAULT.equals(customName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", driver: ");
    result.append(driver);
    result.append(", external: ");
    result.append(external);
    result.append(", customName: ");
    result.append(customName);
    result.append(')');
    return result.toString();
  }

} //VolumesImpl
