/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.compose.composeFile.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.palladiosimulator.somox.docker.compose.composeFile.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ComposeFileFactoryImpl extends EFactoryImpl implements ComposeFileFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ComposeFileFactory init()
  {
    try
    {
      ComposeFileFactory theComposeFileFactory = (ComposeFileFactory)EPackage.Registry.INSTANCE.getEFactory(ComposeFilePackage.eNS_URI);
      if (theComposeFileFactory != null)
      {
        return theComposeFileFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ComposeFileFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeFileFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ComposeFilePackage.DOCKER_COMPOSE: return createDockerCompose();
      case ComposeFilePackage.SERVICE: return createService();
      case ComposeFilePackage.BUILD: return createBuild();
      case ComposeFilePackage.BUILD_LONG_SYNTAX: return createBuildLongSyntax();
      case ComposeFilePackage.DEPLOY_CONFIGS: return createDeployConfigs();
      case ComposeFilePackage.DEPLOY_CONFIGS_LONG_SYNTAX: return createDeployConfigsLongSyntax();
      case ComposeFilePackage.CREDENTIAL_SPEC: return createCredentialSpec();
      case ComposeFilePackage.DEPLOY: return createDeploy();
      case ComposeFilePackage.PLACEMENT: return createPlacement();
      case ComposeFilePackage.RESTART_POLICY: return createRestartPolicy();
      case ComposeFilePackage.CONFIG: return createConfig();
      case ComposeFilePackage.HEALTHCHECK: return createHealthcheck();
      case ComposeFilePackage.LOGGING: return createLogging();
      case ComposeFilePackage.PORTS: return createPorts();
      case ComposeFilePackage.PORT_LONG_SYNTAX: return createPortLongSyntax();
      case ComposeFilePackage.SERVICE_SECRETS: return createServiceSecrets();
      case ComposeFilePackage.SERVICE_SECRETS_LONG_SYNTAX: return createServiceSecretsLongSyntax();
      case ComposeFilePackage.ULIMITS: return createUlimits();
      case ComposeFilePackage.SERVICE_VOLUMES: return createServiceVolumes();
      case ComposeFilePackage.SERVICE_VOLUME_LONG_SYNTAX: return createServiceVolumeLongSyntax();
      case ComposeFilePackage.VOLUMES: return createVolumes();
      case ComposeFilePackage.NETWORKS: return createNetworks();
      case ComposeFilePackage.IPAM: return createIpam();
      case ComposeFilePackage.CONFIGS: return createConfigs();
      case ComposeFilePackage.SECRETS: return createSecrets();
      case ComposeFilePackage.VALUE_OR_LIST: return createValueOrList();
      case ComposeFilePackage.LIST_OR_MAPPING: return createListOrMapping();
      case ComposeFilePackage.LIST: return createList();
      case ComposeFilePackage.MAPPING: return createMapping();
      case ComposeFilePackage.MAPPING_WITH_PREFIX_AND_COLON: return createMappingWithPrefixAndColon();
      case ComposeFilePackage.MAPPING_WITHOUT_PREFIX_AND_COLON: return createMappingWithoutPrefixAndColon();
      case ComposeFilePackage.MAPPING_WITH_PREFIX_AND_EQUAL: return createMappingWithPrefixAndEqual();
      case ComposeFilePackage.MAPPING_WITHOUT_PREFIX_AND_EQUAL: return createMappingWithoutPrefixAndEqual();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DockerCompose createDockerCompose()
  {
    DockerComposeImpl dockerCompose = new DockerComposeImpl();
    return dockerCompose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Build createBuild()
  {
    BuildImpl build = new BuildImpl();
    return build;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BuildLongSyntax createBuildLongSyntax()
  {
    BuildLongSyntaxImpl buildLongSyntax = new BuildLongSyntaxImpl();
    return buildLongSyntax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeployConfigs createDeployConfigs()
  {
    DeployConfigsImpl deployConfigs = new DeployConfigsImpl();
    return deployConfigs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeployConfigsLongSyntax createDeployConfigsLongSyntax()
  {
    DeployConfigsLongSyntaxImpl deployConfigsLongSyntax = new DeployConfigsLongSyntaxImpl();
    return deployConfigsLongSyntax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CredentialSpec createCredentialSpec()
  {
    CredentialSpecImpl credentialSpec = new CredentialSpecImpl();
    return credentialSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Deploy createDeploy()
  {
    DeployImpl deploy = new DeployImpl();
    return deploy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Placement createPlacement()
  {
    PlacementImpl placement = new PlacementImpl();
    return placement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestartPolicy createRestartPolicy()
  {
    RestartPolicyImpl restartPolicy = new RestartPolicyImpl();
    return restartPolicy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Config createConfig()
  {
    ConfigImpl config = new ConfigImpl();
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Healthcheck createHealthcheck()
  {
    HealthcheckImpl healthcheck = new HealthcheckImpl();
    return healthcheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Logging createLogging()
  {
    LoggingImpl logging = new LoggingImpl();
    return logging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ports createPorts()
  {
    PortsImpl ports = new PortsImpl();
    return ports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortLongSyntax createPortLongSyntax()
  {
    PortLongSyntaxImpl portLongSyntax = new PortLongSyntaxImpl();
    return portLongSyntax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceSecrets createServiceSecrets()
  {
    ServiceSecretsImpl serviceSecrets = new ServiceSecretsImpl();
    return serviceSecrets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceSecretsLongSyntax createServiceSecretsLongSyntax()
  {
    ServiceSecretsLongSyntaxImpl serviceSecretsLongSyntax = new ServiceSecretsLongSyntaxImpl();
    return serviceSecretsLongSyntax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ulimits createUlimits()
  {
    UlimitsImpl ulimits = new UlimitsImpl();
    return ulimits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceVolumes createServiceVolumes()
  {
    ServiceVolumesImpl serviceVolumes = new ServiceVolumesImpl();
    return serviceVolumes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceVolumeLongSyntax createServiceVolumeLongSyntax()
  {
    ServiceVolumeLongSyntaxImpl serviceVolumeLongSyntax = new ServiceVolumeLongSyntaxImpl();
    return serviceVolumeLongSyntax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Volumes createVolumes()
  {
    VolumesImpl volumes = new VolumesImpl();
    return volumes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Networks createNetworks()
  {
    NetworksImpl networks = new NetworksImpl();
    return networks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ipam createIpam()
  {
    IpamImpl ipam = new IpamImpl();
    return ipam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configs createConfigs()
  {
    ConfigsImpl configs = new ConfigsImpl();
    return configs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Secrets createSecrets()
  {
    SecretsImpl secrets = new SecretsImpl();
    return secrets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueOrList createValueOrList()
  {
    ValueOrListImpl valueOrList = new ValueOrListImpl();
    return valueOrList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListOrMapping createListOrMapping()
  {
    ListOrMappingImpl listOrMapping = new ListOrMappingImpl();
    return listOrMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingWithPrefixAndColon createMappingWithPrefixAndColon()
  {
    MappingWithPrefixAndColonImpl mappingWithPrefixAndColon = new MappingWithPrefixAndColonImpl();
    return mappingWithPrefixAndColon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingWithoutPrefixAndColon createMappingWithoutPrefixAndColon()
  {
    MappingWithoutPrefixAndColonImpl mappingWithoutPrefixAndColon = new MappingWithoutPrefixAndColonImpl();
    return mappingWithoutPrefixAndColon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingWithPrefixAndEqual createMappingWithPrefixAndEqual()
  {
    MappingWithPrefixAndEqualImpl mappingWithPrefixAndEqual = new MappingWithPrefixAndEqualImpl();
    return mappingWithPrefixAndEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingWithoutPrefixAndEqual createMappingWithoutPrefixAndEqual()
  {
    MappingWithoutPrefixAndEqualImpl mappingWithoutPrefixAndEqual = new MappingWithoutPrefixAndEqualImpl();
    return mappingWithoutPrefixAndEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeFilePackage getComposeFilePackage()
  {
    return (ComposeFilePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ComposeFilePackage getPackage()
  {
    return ComposeFilePackage.eINSTANCE;
  }

} //ComposeFileFactoryImpl
