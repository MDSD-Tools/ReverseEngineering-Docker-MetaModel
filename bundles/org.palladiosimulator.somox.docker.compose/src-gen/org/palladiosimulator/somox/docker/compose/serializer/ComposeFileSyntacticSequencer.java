/*
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.compose.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.palladiosimulator.somox.docker.compose.services.ComposeFileGrammarAccess;

@SuppressWarnings("all")
public class ComposeFileSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ComposeFileGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DockerCompose___ConfigsKeyword_7_0_ColonKeyword_7_1_BEGINTerminalRuleCall_7_2_ENDTerminalRuleCall_7_4__q;
	protected AbstractElementAlias match_DockerCompose___NetworksKeyword_6_0_ColonKeyword_6_1_BEGINTerminalRuleCall_6_2_ENDTerminalRuleCall_6_4__q;
	protected AbstractElementAlias match_DockerCompose___SecretsKeyword_8_0_ColonKeyword_8_1_BEGINTerminalRuleCall_8_2_ENDTerminalRuleCall_8_4__q;
	protected AbstractElementAlias match_DockerCompose___ServicesKeyword_4_0_ColonKeyword_4_1_BEGINTerminalRuleCall_4_2_ENDTerminalRuleCall_4_4__q;
	protected AbstractElementAlias match_DockerCompose___VolumesKeyword_5_0_ColonKeyword_5_1_BEGINTerminalRuleCall_5_2_ENDTerminalRuleCall_5_4__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ComposeFileGrammarAccess) access;
		match_DockerCompose___ConfigsKeyword_7_0_ColonKeyword_7_1_BEGINTerminalRuleCall_7_2_ENDTerminalRuleCall_7_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getConfigsKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getColonKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getBEGINTerminalRuleCall_7_2()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getENDTerminalRuleCall_7_4()));
		match_DockerCompose___NetworksKeyword_6_0_ColonKeyword_6_1_BEGINTerminalRuleCall_6_2_ENDTerminalRuleCall_6_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getNetworksKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getColonKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getBEGINTerminalRuleCall_6_2()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getENDTerminalRuleCall_6_4()));
		match_DockerCompose___SecretsKeyword_8_0_ColonKeyword_8_1_BEGINTerminalRuleCall_8_2_ENDTerminalRuleCall_8_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getSecretsKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getColonKeyword_8_1()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getBEGINTerminalRuleCall_8_2()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getENDTerminalRuleCall_8_4()));
		match_DockerCompose___ServicesKeyword_4_0_ColonKeyword_4_1_BEGINTerminalRuleCall_4_2_ENDTerminalRuleCall_4_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getServicesKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getColonKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getBEGINTerminalRuleCall_4_2()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getENDTerminalRuleCall_4_4()));
		match_DockerCompose___VolumesKeyword_5_0_ColonKeyword_5_1_BEGINTerminalRuleCall_5_2_ENDTerminalRuleCall_5_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVolumesKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getColonKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getBEGINTerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getENDTerminalRuleCall_5_4()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DockerCompose___ConfigsKeyword_7_0_ColonKeyword_7_1_BEGINTerminalRuleCall_7_2_ENDTerminalRuleCall_7_4__q.equals(syntax))
				emit_DockerCompose___ConfigsKeyword_7_0_ColonKeyword_7_1_BEGINTerminalRuleCall_7_2_ENDTerminalRuleCall_7_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose___NetworksKeyword_6_0_ColonKeyword_6_1_BEGINTerminalRuleCall_6_2_ENDTerminalRuleCall_6_4__q.equals(syntax))
				emit_DockerCompose___NetworksKeyword_6_0_ColonKeyword_6_1_BEGINTerminalRuleCall_6_2_ENDTerminalRuleCall_6_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose___SecretsKeyword_8_0_ColonKeyword_8_1_BEGINTerminalRuleCall_8_2_ENDTerminalRuleCall_8_4__q.equals(syntax))
				emit_DockerCompose___SecretsKeyword_8_0_ColonKeyword_8_1_BEGINTerminalRuleCall_8_2_ENDTerminalRuleCall_8_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose___ServicesKeyword_4_0_ColonKeyword_4_1_BEGINTerminalRuleCall_4_2_ENDTerminalRuleCall_4_4__q.equals(syntax))
				emit_DockerCompose___ServicesKeyword_4_0_ColonKeyword_4_1_BEGINTerminalRuleCall_4_2_ENDTerminalRuleCall_4_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose___VolumesKeyword_5_0_ColonKeyword_5_1_BEGINTerminalRuleCall_5_2_ENDTerminalRuleCall_5_4__q.equals(syntax))
				emit_DockerCompose___VolumesKeyword_5_0_ColonKeyword_5_1_BEGINTerminalRuleCall_5_2_ENDTerminalRuleCall_5_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('configs' ':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     networks+=Networks END (ambiguity) 'secrets' ':' BEGIN secrets+=Secrets
	 *     networks+=Networks END (ambiguity) ('secrets' ':' BEGIN END)? (rule end)
	 *     services+=Service END ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? (ambiguity) 'secrets' ':' BEGIN secrets+=Secrets
	 *     services+=Service END ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? (ambiguity) ('secrets' ':' BEGIN END)? (rule end)
	 *     version=STRING ('services' ':' BEGIN END)? ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? (ambiguity) 'secrets' ':' BEGIN secrets+=Secrets
	 *     version=STRING ('services' ':' BEGIN END)? ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? (ambiguity) ('secrets' ':' BEGIN END)? (rule end)
	 *     volumes+=Volumes END ('networks' ':' BEGIN END)? (ambiguity) 'secrets' ':' BEGIN secrets+=Secrets
	 *     volumes+=Volumes END ('networks' ':' BEGIN END)? (ambiguity) ('secrets' ':' BEGIN END)? (rule end)
	 */
	protected void emit_DockerCompose___ConfigsKeyword_7_0_ColonKeyword_7_1_BEGINTerminalRuleCall_7_2_ENDTerminalRuleCall_7_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('networks' ':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service END ('volumes' ':' BEGIN END)? (ambiguity) 'configs' ':' BEGIN configs+=Configs
	 *     services+=Service END ('volumes' ':' BEGIN END)? (ambiguity) ('configs' ':' BEGIN END)? 'secrets' ':' BEGIN secrets+=Secrets
	 *     services+=Service END ('volumes' ':' BEGIN END)? (ambiguity) ('configs' ':' BEGIN END)? ('secrets' ':' BEGIN END)? (rule end)
	 *     version=STRING ('services' ':' BEGIN END)? ('volumes' ':' BEGIN END)? (ambiguity) 'configs' ':' BEGIN configs+=Configs
	 *     version=STRING ('services' ':' BEGIN END)? ('volumes' ':' BEGIN END)? (ambiguity) ('configs' ':' BEGIN END)? 'secrets' ':' BEGIN secrets+=Secrets
	 *     version=STRING ('services' ':' BEGIN END)? ('volumes' ':' BEGIN END)? (ambiguity) ('configs' ':' BEGIN END)? ('secrets' ':' BEGIN END)? (rule end)
	 *     volumes+=Volumes END (ambiguity) 'configs' ':' BEGIN configs+=Configs
	 *     volumes+=Volumes END (ambiguity) ('configs' ':' BEGIN END)? 'secrets' ':' BEGIN secrets+=Secrets
	 *     volumes+=Volumes END (ambiguity) ('configs' ':' BEGIN END)? ('secrets' ':' BEGIN END)? (rule end)
	 */
	protected void emit_DockerCompose___NetworksKeyword_6_0_ColonKeyword_6_1_BEGINTerminalRuleCall_6_2_ENDTerminalRuleCall_6_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('secrets' ':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=Configs END (ambiguity) (rule end)
	 *     networks+=Networks END ('configs' ':' BEGIN END)? (ambiguity) (rule end)
	 *     services+=Service END ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? (ambiguity) (rule end)
	 *     version=STRING ('services' ':' BEGIN END)? ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? (ambiguity) (rule end)
	 *     volumes+=Volumes END ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? (ambiguity) (rule end)
	 */
	protected void emit_DockerCompose___SecretsKeyword_8_0_ColonKeyword_8_1_BEGINTerminalRuleCall_8_2_ENDTerminalRuleCall_8_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('services' ':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     version=STRING (ambiguity) 'volumes' ':' BEGIN volumes+=Volumes
	 *     version=STRING (ambiguity) ('volumes' ':' BEGIN END)? 'networks' ':' BEGIN networks+=Networks
	 *     version=STRING (ambiguity) ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? 'configs' ':' BEGIN configs+=Configs
	 *     version=STRING (ambiguity) ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? 'secrets' ':' BEGIN secrets+=Secrets
	 *     version=STRING (ambiguity) ('volumes' ':' BEGIN END)? ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? ('secrets' ':' BEGIN END)? (rule end)
	 */
	protected void emit_DockerCompose___ServicesKeyword_4_0_ColonKeyword_4_1_BEGINTerminalRuleCall_4_2_ENDTerminalRuleCall_4_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('volumes' ':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service END (ambiguity) 'networks' ':' BEGIN networks+=Networks
	 *     services+=Service END (ambiguity) ('networks' ':' BEGIN END)? 'configs' ':' BEGIN configs+=Configs
	 *     services+=Service END (ambiguity) ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? 'secrets' ':' BEGIN secrets+=Secrets
	 *     services+=Service END (ambiguity) ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? ('secrets' ':' BEGIN END)? (rule end)
	 *     version=STRING ('services' ':' BEGIN END)? (ambiguity) 'networks' ':' BEGIN networks+=Networks
	 *     version=STRING ('services' ':' BEGIN END)? (ambiguity) ('networks' ':' BEGIN END)? 'configs' ':' BEGIN configs+=Configs
	 *     version=STRING ('services' ':' BEGIN END)? (ambiguity) ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? 'secrets' ':' BEGIN secrets+=Secrets
	 *     version=STRING ('services' ':' BEGIN END)? (ambiguity) ('networks' ':' BEGIN END)? ('configs' ':' BEGIN END)? ('secrets' ':' BEGIN END)? (rule end)
	 */
	protected void emit_DockerCompose___VolumesKeyword_5_0_ColonKeyword_5_1_BEGINTerminalRuleCall_5_2_ENDTerminalRuleCall_5_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
