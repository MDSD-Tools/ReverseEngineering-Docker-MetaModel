/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.compose.composeFile.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.palladiosimulator.somox.docker.compose.composeFile.Build;
import org.palladiosimulator.somox.docker.compose.composeFile.BuildLongSyntax;
import org.palladiosimulator.somox.docker.compose.composeFile.ComposeFileFactory;
import org.palladiosimulator.somox.docker.compose.composeFile.ComposeFilePackage;
import org.palladiosimulator.somox.docker.compose.composeFile.Config;
import org.palladiosimulator.somox.docker.compose.composeFile.Configs;
import org.palladiosimulator.somox.docker.compose.composeFile.CredentialSpec;
import org.palladiosimulator.somox.docker.compose.composeFile.Deploy;
import org.palladiosimulator.somox.docker.compose.composeFile.DeployConfigs;
import org.palladiosimulator.somox.docker.compose.composeFile.DeployConfigsLongSyntax;
import org.palladiosimulator.somox.docker.compose.composeFile.DockerCompose;
import org.palladiosimulator.somox.docker.compose.composeFile.Healthcheck;
import org.palladiosimulator.somox.docker.compose.composeFile.Ipam;
import org.palladiosimulator.somox.docker.compose.composeFile.List;
import org.palladiosimulator.somox.docker.compose.composeFile.ListOrMapping;
import org.palladiosimulator.somox.docker.compose.composeFile.Logging;
import org.palladiosimulator.somox.docker.compose.composeFile.Mapping;
import org.palladiosimulator.somox.docker.compose.composeFile.MappingWithPrefixAndColon;
import org.palladiosimulator.somox.docker.compose.composeFile.MappingWithPrefixAndEqual;
import org.palladiosimulator.somox.docker.compose.composeFile.MappingWithoutPrefixAndColon;
import org.palladiosimulator.somox.docker.compose.composeFile.MappingWithoutPrefixAndEqual;
import org.palladiosimulator.somox.docker.compose.composeFile.Networks;
import org.palladiosimulator.somox.docker.compose.composeFile.Placement;
import org.palladiosimulator.somox.docker.compose.composeFile.PortLongSyntax;
import org.palladiosimulator.somox.docker.compose.composeFile.Ports;
import org.palladiosimulator.somox.docker.compose.composeFile.RestartPolicy;
import org.palladiosimulator.somox.docker.compose.composeFile.Secrets;
import org.palladiosimulator.somox.docker.compose.composeFile.Service;
import org.palladiosimulator.somox.docker.compose.composeFile.ServiceSecrets;
import org.palladiosimulator.somox.docker.compose.composeFile.ServiceSecretsLongSyntax;
import org.palladiosimulator.somox.docker.compose.composeFile.ServiceVolumeLongSyntax;
import org.palladiosimulator.somox.docker.compose.composeFile.ServiceVolumes;
import org.palladiosimulator.somox.docker.compose.composeFile.Ulimits;
import org.palladiosimulator.somox.docker.compose.composeFile.ValueOrList;
import org.palladiosimulator.somox.docker.compose.composeFile.Volumes;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ComposeFilePackageImpl extends EPackageImpl implements ComposeFilePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dockerComposeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass buildEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass buildLongSyntaxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deployConfigsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deployConfigsLongSyntaxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass credentialSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deployEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass placementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass restartPolicyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass healthcheckEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loggingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass portsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass portLongSyntaxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceSecretsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceSecretsLongSyntaxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ulimitsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceVolumesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceVolumeLongSyntaxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass volumesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass networksEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ipamEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass secretsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueOrListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass listOrMappingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass listEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingWithPrefixAndColonEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingWithoutPrefixAndColonEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingWithPrefixAndEqualEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingWithoutPrefixAndEqualEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.palladiosimulator.somox.docker.compose.composeFile.ComposeFilePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private ComposeFilePackageImpl()
  {
    super(eNS_URI, ComposeFileFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link ComposeFilePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static ComposeFilePackage init()
  {
    if (isInited) return (ComposeFilePackage)EPackage.Registry.INSTANCE.getEPackage(ComposeFilePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredComposeFilePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    ComposeFilePackageImpl theComposeFilePackage = registeredComposeFilePackage instanceof ComposeFilePackageImpl ? (ComposeFilePackageImpl)registeredComposeFilePackage : new ComposeFilePackageImpl();

    isInited = true;

    // Create package meta-data objects
    theComposeFilePackage.createPackageContents();

    // Initialize created meta-data
    theComposeFilePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theComposeFilePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(ComposeFilePackage.eNS_URI, theComposeFilePackage);
    return theComposeFilePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDockerCompose()
  {
    return dockerComposeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDockerCompose_Version()
  {
    return (EAttribute)dockerComposeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDockerCompose_Services()
  {
    return (EReference)dockerComposeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDockerCompose_Volumes()
  {
    return (EReference)dockerComposeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDockerCompose_Networks()
  {
    return (EReference)dockerComposeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDockerCompose_Configs()
  {
    return (EReference)dockerComposeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDockerCompose_Secrets()
  {
    return (EReference)dockerComposeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getService()
  {
    return serviceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Name()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Build()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Cap_add()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Cap_drop()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Cgroup_parent()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Command()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Container_name()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Credential_spec()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Depends_on()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Deploy()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Devices()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Dns()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Domainname()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Entrypoint()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Env_file()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Environment()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Expose()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_External_links()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Healthcheck()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(18);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Hostname()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(19);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Image()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(20);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Init()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(21);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Ipc()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(22);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Isolation()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(23);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Labels()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(24);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Links()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(25);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Logging()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(26);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Mac_address()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(27);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Network_mode()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(28);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Networks()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(29);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Pid()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(30);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Ports()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(31);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Privileged()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(32);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Read_only()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(33);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Restart()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(34);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Secrets()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(35);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Security_opt()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(36);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Shm_size()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(37);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Stdin_open()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(38);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Stop_grace_period()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(39);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Stop_signal()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(40);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Sysctls()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(41);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Tty()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(42);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Ulimits()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(43);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_User()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(44);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Userns_mode()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(45);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Volumes()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(46);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Working_dir()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(47);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBuild()
  {
    return buildEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBuild_Build()
  {
    return (EAttribute)buildEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBuildLongSyntax()
  {
    return buildLongSyntaxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBuildLongSyntax_Context()
  {
    return (EAttribute)buildLongSyntaxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBuildLongSyntax_Dockerfile()
  {
    return (EAttribute)buildLongSyntaxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBuildLongSyntax_Args()
  {
    return (EReference)buildLongSyntaxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBuildLongSyntax_Labels()
  {
    return (EReference)buildLongSyntaxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBuildLongSyntax_Cache_from()
  {
    return (EReference)buildLongSyntaxEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBuildLongSyntax_Network()
  {
    return (EAttribute)buildLongSyntaxEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBuildLongSyntax_Target()
  {
    return (EAttribute)buildLongSyntaxEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBuildLongSyntax_Shm_size()
  {
    return (EAttribute)buildLongSyntaxEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeployConfigs()
  {
    return deployConfigsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeployConfigsLongSyntax()
  {
    return deployConfigsLongSyntaxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeployConfigsLongSyntax_Source()
  {
    return (EAttribute)deployConfigsLongSyntaxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeployConfigsLongSyntax_Target()
  {
    return (EAttribute)deployConfigsLongSyntaxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeployConfigsLongSyntax_Uid()
  {
    return (EAttribute)deployConfigsLongSyntaxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeployConfigsLongSyntax_Gid()
  {
    return (EAttribute)deployConfigsLongSyntaxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeployConfigsLongSyntax_Mode()
  {
    return (EAttribute)deployConfigsLongSyntaxEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCredentialSpec()
  {
    return credentialSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCredentialSpec_File()
  {
    return (EAttribute)credentialSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCredentialSpec_Registry()
  {
    return (EAttribute)credentialSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeploy()
  {
    return deployEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeploy_Endpoint_mode()
  {
    return (EAttribute)deployEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeploy_Labels()
  {
    return (EReference)deployEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeploy_Mode()
  {
    return (EAttribute)deployEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeploy_Placement()
  {
    return (EReference)deployEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeploy_Replicas()
  {
    return (EAttribute)deployEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeploy_Resources()
  {
    return (EAttribute)deployEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeploy_Restart_policy()
  {
    return (EReference)deployEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeploy_Rollback_config()
  {
    return (EReference)deployEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeploy_Update_config()
  {
    return (EReference)deployEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPlacement()
  {
    return placementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPlacement_Constraints()
  {
    return (EReference)placementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPlacement_Preferences()
  {
    return (EReference)placementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRestartPolicy()
  {
    return restartPolicyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRestartPolicy_Condition()
  {
    return (EAttribute)restartPolicyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRestartPolicy_Delay()
  {
    return (EAttribute)restartPolicyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRestartPolicy_Max_attempts()
  {
    return (EAttribute)restartPolicyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRestartPolicy_Window()
  {
    return (EAttribute)restartPolicyEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfig()
  {
    return configEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfig_Parallelism()
  {
    return (EAttribute)configEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfig_Delay()
  {
    return (EAttribute)configEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfig_Failure_action()
  {
    return (EAttribute)configEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfig_Monitor()
  {
    return (EAttribute)configEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfig_Max_failure_ratio()
  {
    return (EAttribute)configEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfig_Order()
  {
    return (EAttribute)configEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getHealthcheck()
  {
    return healthcheckEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHealthcheck_Disable()
  {
    return (EAttribute)healthcheckEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHealthcheck_Interval()
  {
    return (EAttribute)healthcheckEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHealthcheck_Retries()
  {
    return (EAttribute)healthcheckEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHealthcheck_Test()
  {
    return (EReference)healthcheckEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHealthcheck_Timeout()
  {
    return (EAttribute)healthcheckEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHealthcheck_Start_period()
  {
    return (EAttribute)healthcheckEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLogging()
  {
    return loggingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLogging_Driver()
  {
    return (EAttribute)loggingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLogging_Options()
  {
    return (EReference)loggingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPorts()
  {
    return portsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPorts_Ports()
  {
    return (EReference)portsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPortLongSyntax()
  {
    return portLongSyntaxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPortLongSyntax_Target()
  {
    return (EAttribute)portLongSyntaxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPortLongSyntax_Published()
  {
    return (EAttribute)portLongSyntaxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPortLongSyntax_Protocol()
  {
    return (EAttribute)portLongSyntaxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPortLongSyntax_Mode()
  {
    return (EAttribute)portLongSyntaxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getServiceSecrets()
  {
    return serviceSecretsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceSecrets_Secret()
  {
    return (EAttribute)serviceSecretsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getServiceSecretsLongSyntax()
  {
    return serviceSecretsLongSyntaxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceSecretsLongSyntax_Source()
  {
    return (EAttribute)serviceSecretsLongSyntaxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceSecretsLongSyntax_Target()
  {
    return (EAttribute)serviceSecretsLongSyntaxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceSecretsLongSyntax_Uid()
  {
    return (EAttribute)serviceSecretsLongSyntaxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceSecretsLongSyntax_Gid()
  {
    return (EAttribute)serviceSecretsLongSyntaxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceSecretsLongSyntax_Mode()
  {
    return (EAttribute)serviceSecretsLongSyntaxEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUlimits()
  {
    return ulimitsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUlimits_Name()
  {
    return (EAttribute)ulimitsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUlimits_Value()
  {
    return (EAttribute)ulimitsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUlimits_Soft()
  {
    return (EAttribute)ulimitsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getUlimits_Hard()
  {
    return (EAttribute)ulimitsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getServiceVolumes()
  {
    return serviceVolumesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumes_Volumes()
  {
    return (EAttribute)serviceVolumesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getServiceVolumeLongSyntax()
  {
    return serviceVolumeLongSyntaxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_Type()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_Source()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_Target()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_Read_only()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_Consistency()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_BindPropagation()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_VolumeNocopy()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServiceVolumeLongSyntax_TmpfsSize()
  {
    return (EAttribute)serviceVolumeLongSyntaxEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVolumes()
  {
    return volumesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVolumes_Name()
  {
    return (EAttribute)volumesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVolumes_Driver()
  {
    return (EAttribute)volumesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVolumes_Driver_opts()
  {
    return (EReference)volumesEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVolumes_External()
  {
    return (EAttribute)volumesEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVolumes_Labels()
  {
    return (EReference)volumesEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVolumes_CustomName()
  {
    return (EAttribute)volumesEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNetworks()
  {
    return networksEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_Name()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_Driver()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworks_Driver_opts()
  {
    return (EReference)networksEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_Attachable()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_Enable_ipv6()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworks_Ipam()
  {
    return (EReference)networksEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_Internal()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNetworks_Labels()
  {
    return (EReference)networksEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_External()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNetworks_CustomName()
  {
    return (EAttribute)networksEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIpam()
  {
    return ipamEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIpam_Driver()
  {
    return (EAttribute)ipamEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIpam_Config()
  {
    return (EReference)ipamEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigs()
  {
    return configsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigs_List()
  {
    return (EReference)configsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigs_Name()
  {
    return (EAttribute)configsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigs_File()
  {
    return (EAttribute)configsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigs_External()
  {
    return (EAttribute)configsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigs_CustomName()
  {
    return (EAttribute)configsEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSecrets()
  {
    return secretsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSecrets_Name()
  {
    return (EAttribute)secretsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSecrets_File()
  {
    return (EAttribute)secretsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSecrets_External()
  {
    return (EAttribute)secretsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSecrets_CustomName()
  {
    return (EAttribute)secretsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValueOrList()
  {
    return valueOrListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getListOrMapping()
  {
    return listOrMappingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getList()
  {
    return listEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getList_List()
  {
    return (EAttribute)listEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMapping()
  {
    return mappingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMapping_Map()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMappingWithPrefixAndColon()
  {
    return mappingWithPrefixAndColonEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithPrefixAndColon_Name()
  {
    return (EAttribute)mappingWithPrefixAndColonEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithPrefixAndColon_Value()
  {
    return (EAttribute)mappingWithPrefixAndColonEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMappingWithoutPrefixAndColon()
  {
    return mappingWithoutPrefixAndColonEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithoutPrefixAndColon_Name()
  {
    return (EAttribute)mappingWithoutPrefixAndColonEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithoutPrefixAndColon_Value()
  {
    return (EAttribute)mappingWithoutPrefixAndColonEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMappingWithPrefixAndEqual()
  {
    return mappingWithPrefixAndEqualEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithPrefixAndEqual_Name()
  {
    return (EAttribute)mappingWithPrefixAndEqualEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithPrefixAndEqual_Value()
  {
    return (EAttribute)mappingWithPrefixAndEqualEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMappingWithoutPrefixAndEqual()
  {
    return mappingWithoutPrefixAndEqualEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithoutPrefixAndEqual_Name()
  {
    return (EAttribute)mappingWithoutPrefixAndEqualEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMappingWithoutPrefixAndEqual_Value()
  {
    return (EAttribute)mappingWithoutPrefixAndEqualEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeFileFactory getComposeFileFactory()
  {
    return (ComposeFileFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    dockerComposeEClass = createEClass(DOCKER_COMPOSE);
    createEAttribute(dockerComposeEClass, DOCKER_COMPOSE__VERSION);
    createEReference(dockerComposeEClass, DOCKER_COMPOSE__SERVICES);
    createEReference(dockerComposeEClass, DOCKER_COMPOSE__VOLUMES);
    createEReference(dockerComposeEClass, DOCKER_COMPOSE__NETWORKS);
    createEReference(dockerComposeEClass, DOCKER_COMPOSE__CONFIGS);
    createEReference(dockerComposeEClass, DOCKER_COMPOSE__SECRETS);

    serviceEClass = createEClass(SERVICE);
    createEAttribute(serviceEClass, SERVICE__NAME);
    createEReference(serviceEClass, SERVICE__BUILD);
    createEReference(serviceEClass, SERVICE__CAP_ADD);
    createEReference(serviceEClass, SERVICE__CAP_DROP);
    createEAttribute(serviceEClass, SERVICE__CGROUP_PARENT);
    createEAttribute(serviceEClass, SERVICE__COMMAND);
    createEAttribute(serviceEClass, SERVICE__CONTAINER_NAME);
    createEReference(serviceEClass, SERVICE__CREDENTIAL_SPEC);
    createEReference(serviceEClass, SERVICE__DEPENDS_ON);
    createEReference(serviceEClass, SERVICE__DEPLOY);
    createEReference(serviceEClass, SERVICE__DEVICES);
    createEReference(serviceEClass, SERVICE__DNS);
    createEAttribute(serviceEClass, SERVICE__DOMAINNAME);
    createEReference(serviceEClass, SERVICE__ENTRYPOINT);
    createEReference(serviceEClass, SERVICE__ENV_FILE);
    createEReference(serviceEClass, SERVICE__ENVIRONMENT);
    createEReference(serviceEClass, SERVICE__EXPOSE);
    createEReference(serviceEClass, SERVICE__EXTERNAL_LINKS);
    createEReference(serviceEClass, SERVICE__HEALTHCHECK);
    createEAttribute(serviceEClass, SERVICE__HOSTNAME);
    createEAttribute(serviceEClass, SERVICE__IMAGE);
    createEAttribute(serviceEClass, SERVICE__INIT);
    createEAttribute(serviceEClass, SERVICE__IPC);
    createEAttribute(serviceEClass, SERVICE__ISOLATION);
    createEReference(serviceEClass, SERVICE__LABELS);
    createEReference(serviceEClass, SERVICE__LINKS);
    createEReference(serviceEClass, SERVICE__LOGGING);
    createEAttribute(serviceEClass, SERVICE__MAC_ADDRESS);
    createEAttribute(serviceEClass, SERVICE__NETWORK_MODE);
    createEReference(serviceEClass, SERVICE__NETWORKS);
    createEAttribute(serviceEClass, SERVICE__PID);
    createEReference(serviceEClass, SERVICE__PORTS);
    createEAttribute(serviceEClass, SERVICE__PRIVILEGED);
    createEAttribute(serviceEClass, SERVICE__READ_ONLY);
    createEAttribute(serviceEClass, SERVICE__RESTART);
    createEReference(serviceEClass, SERVICE__SECRETS);
    createEReference(serviceEClass, SERVICE__SECURITY_OPT);
    createEAttribute(serviceEClass, SERVICE__SHM_SIZE);
    createEAttribute(serviceEClass, SERVICE__STDIN_OPEN);
    createEAttribute(serviceEClass, SERVICE__STOP_GRACE_PERIOD);
    createEAttribute(serviceEClass, SERVICE__STOP_SIGNAL);
    createEReference(serviceEClass, SERVICE__SYSCTLS);
    createEAttribute(serviceEClass, SERVICE__TTY);
    createEReference(serviceEClass, SERVICE__ULIMITS);
    createEAttribute(serviceEClass, SERVICE__USER);
    createEAttribute(serviceEClass, SERVICE__USERNS_MODE);
    createEReference(serviceEClass, SERVICE__VOLUMES);
    createEAttribute(serviceEClass, SERVICE__WORKING_DIR);

    buildEClass = createEClass(BUILD);
    createEAttribute(buildEClass, BUILD__BUILD);

    buildLongSyntaxEClass = createEClass(BUILD_LONG_SYNTAX);
    createEAttribute(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__CONTEXT);
    createEAttribute(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__DOCKERFILE);
    createEReference(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__ARGS);
    createEReference(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__LABELS);
    createEReference(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__CACHE_FROM);
    createEAttribute(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__NETWORK);
    createEAttribute(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__TARGET);
    createEAttribute(buildLongSyntaxEClass, BUILD_LONG_SYNTAX__SHM_SIZE);

    deployConfigsEClass = createEClass(DEPLOY_CONFIGS);

    deployConfigsLongSyntaxEClass = createEClass(DEPLOY_CONFIGS_LONG_SYNTAX);
    createEAttribute(deployConfigsLongSyntaxEClass, DEPLOY_CONFIGS_LONG_SYNTAX__SOURCE);
    createEAttribute(deployConfigsLongSyntaxEClass, DEPLOY_CONFIGS_LONG_SYNTAX__TARGET);
    createEAttribute(deployConfigsLongSyntaxEClass, DEPLOY_CONFIGS_LONG_SYNTAX__UID);
    createEAttribute(deployConfigsLongSyntaxEClass, DEPLOY_CONFIGS_LONG_SYNTAX__GID);
    createEAttribute(deployConfigsLongSyntaxEClass, DEPLOY_CONFIGS_LONG_SYNTAX__MODE);

    credentialSpecEClass = createEClass(CREDENTIAL_SPEC);
    createEAttribute(credentialSpecEClass, CREDENTIAL_SPEC__FILE);
    createEAttribute(credentialSpecEClass, CREDENTIAL_SPEC__REGISTRY);

    deployEClass = createEClass(DEPLOY);
    createEAttribute(deployEClass, DEPLOY__ENDPOINT_MODE);
    createEReference(deployEClass, DEPLOY__LABELS);
    createEAttribute(deployEClass, DEPLOY__MODE);
    createEReference(deployEClass, DEPLOY__PLACEMENT);
    createEAttribute(deployEClass, DEPLOY__REPLICAS);
    createEAttribute(deployEClass, DEPLOY__RESOURCES);
    createEReference(deployEClass, DEPLOY__RESTART_POLICY);
    createEReference(deployEClass, DEPLOY__ROLLBACK_CONFIG);
    createEReference(deployEClass, DEPLOY__UPDATE_CONFIG);

    placementEClass = createEClass(PLACEMENT);
    createEReference(placementEClass, PLACEMENT__CONSTRAINTS);
    createEReference(placementEClass, PLACEMENT__PREFERENCES);

    restartPolicyEClass = createEClass(RESTART_POLICY);
    createEAttribute(restartPolicyEClass, RESTART_POLICY__CONDITION);
    createEAttribute(restartPolicyEClass, RESTART_POLICY__DELAY);
    createEAttribute(restartPolicyEClass, RESTART_POLICY__MAX_ATTEMPTS);
    createEAttribute(restartPolicyEClass, RESTART_POLICY__WINDOW);

    configEClass = createEClass(CONFIG);
    createEAttribute(configEClass, CONFIG__PARALLELISM);
    createEAttribute(configEClass, CONFIG__DELAY);
    createEAttribute(configEClass, CONFIG__FAILURE_ACTION);
    createEAttribute(configEClass, CONFIG__MONITOR);
    createEAttribute(configEClass, CONFIG__MAX_FAILURE_RATIO);
    createEAttribute(configEClass, CONFIG__ORDER);

    healthcheckEClass = createEClass(HEALTHCHECK);
    createEAttribute(healthcheckEClass, HEALTHCHECK__DISABLE);
    createEAttribute(healthcheckEClass, HEALTHCHECK__INTERVAL);
    createEAttribute(healthcheckEClass, HEALTHCHECK__RETRIES);
    createEReference(healthcheckEClass, HEALTHCHECK__TEST);
    createEAttribute(healthcheckEClass, HEALTHCHECK__TIMEOUT);
    createEAttribute(healthcheckEClass, HEALTHCHECK__START_PERIOD);

    loggingEClass = createEClass(LOGGING);
    createEAttribute(loggingEClass, LOGGING__DRIVER);
    createEReference(loggingEClass, LOGGING__OPTIONS);

    portsEClass = createEClass(PORTS);
    createEReference(portsEClass, PORTS__PORTS);

    portLongSyntaxEClass = createEClass(PORT_LONG_SYNTAX);
    createEAttribute(portLongSyntaxEClass, PORT_LONG_SYNTAX__TARGET);
    createEAttribute(portLongSyntaxEClass, PORT_LONG_SYNTAX__PUBLISHED);
    createEAttribute(portLongSyntaxEClass, PORT_LONG_SYNTAX__PROTOCOL);
    createEAttribute(portLongSyntaxEClass, PORT_LONG_SYNTAX__MODE);

    serviceSecretsEClass = createEClass(SERVICE_SECRETS);
    createEAttribute(serviceSecretsEClass, SERVICE_SECRETS__SECRET);

    serviceSecretsLongSyntaxEClass = createEClass(SERVICE_SECRETS_LONG_SYNTAX);
    createEAttribute(serviceSecretsLongSyntaxEClass, SERVICE_SECRETS_LONG_SYNTAX__SOURCE);
    createEAttribute(serviceSecretsLongSyntaxEClass, SERVICE_SECRETS_LONG_SYNTAX__TARGET);
    createEAttribute(serviceSecretsLongSyntaxEClass, SERVICE_SECRETS_LONG_SYNTAX__UID);
    createEAttribute(serviceSecretsLongSyntaxEClass, SERVICE_SECRETS_LONG_SYNTAX__GID);
    createEAttribute(serviceSecretsLongSyntaxEClass, SERVICE_SECRETS_LONG_SYNTAX__MODE);

    ulimitsEClass = createEClass(ULIMITS);
    createEAttribute(ulimitsEClass, ULIMITS__NAME);
    createEAttribute(ulimitsEClass, ULIMITS__VALUE);
    createEAttribute(ulimitsEClass, ULIMITS__SOFT);
    createEAttribute(ulimitsEClass, ULIMITS__HARD);

    serviceVolumesEClass = createEClass(SERVICE_VOLUMES);
    createEAttribute(serviceVolumesEClass, SERVICE_VOLUMES__VOLUMES);

    serviceVolumeLongSyntaxEClass = createEClass(SERVICE_VOLUME_LONG_SYNTAX);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__TYPE);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__SOURCE);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__TARGET);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__READ_ONLY);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__CONSISTENCY);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__BIND_PROPAGATION);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__VOLUME_NOCOPY);
    createEAttribute(serviceVolumeLongSyntaxEClass, SERVICE_VOLUME_LONG_SYNTAX__TMPFS_SIZE);

    volumesEClass = createEClass(VOLUMES);
    createEAttribute(volumesEClass, VOLUMES__NAME);
    createEAttribute(volumesEClass, VOLUMES__DRIVER);
    createEReference(volumesEClass, VOLUMES__DRIVER_OPTS);
    createEAttribute(volumesEClass, VOLUMES__EXTERNAL);
    createEReference(volumesEClass, VOLUMES__LABELS);
    createEAttribute(volumesEClass, VOLUMES__CUSTOM_NAME);

    networksEClass = createEClass(NETWORKS);
    createEAttribute(networksEClass, NETWORKS__NAME);
    createEAttribute(networksEClass, NETWORKS__DRIVER);
    createEReference(networksEClass, NETWORKS__DRIVER_OPTS);
    createEAttribute(networksEClass, NETWORKS__ATTACHABLE);
    createEAttribute(networksEClass, NETWORKS__ENABLE_IPV6);
    createEReference(networksEClass, NETWORKS__IPAM);
    createEAttribute(networksEClass, NETWORKS__INTERNAL);
    createEReference(networksEClass, NETWORKS__LABELS);
    createEAttribute(networksEClass, NETWORKS__EXTERNAL);
    createEAttribute(networksEClass, NETWORKS__CUSTOM_NAME);

    ipamEClass = createEClass(IPAM);
    createEAttribute(ipamEClass, IPAM__DRIVER);
    createEReference(ipamEClass, IPAM__CONFIG);

    configsEClass = createEClass(CONFIGS);
    createEReference(configsEClass, CONFIGS__LIST);
    createEAttribute(configsEClass, CONFIGS__NAME);
    createEAttribute(configsEClass, CONFIGS__FILE);
    createEAttribute(configsEClass, CONFIGS__EXTERNAL);
    createEAttribute(configsEClass, CONFIGS__CUSTOM_NAME);

    secretsEClass = createEClass(SECRETS);
    createEAttribute(secretsEClass, SECRETS__NAME);
    createEAttribute(secretsEClass, SECRETS__FILE);
    createEAttribute(secretsEClass, SECRETS__EXTERNAL);
    createEAttribute(secretsEClass, SECRETS__CUSTOM_NAME);

    valueOrListEClass = createEClass(VALUE_OR_LIST);

    listOrMappingEClass = createEClass(LIST_OR_MAPPING);

    listEClass = createEClass(LIST);
    createEAttribute(listEClass, LIST__LIST);

    mappingEClass = createEClass(MAPPING);
    createEReference(mappingEClass, MAPPING__MAP);

    mappingWithPrefixAndColonEClass = createEClass(MAPPING_WITH_PREFIX_AND_COLON);
    createEAttribute(mappingWithPrefixAndColonEClass, MAPPING_WITH_PREFIX_AND_COLON__NAME);
    createEAttribute(mappingWithPrefixAndColonEClass, MAPPING_WITH_PREFIX_AND_COLON__VALUE);

    mappingWithoutPrefixAndColonEClass = createEClass(MAPPING_WITHOUT_PREFIX_AND_COLON);
    createEAttribute(mappingWithoutPrefixAndColonEClass, MAPPING_WITHOUT_PREFIX_AND_COLON__NAME);
    createEAttribute(mappingWithoutPrefixAndColonEClass, MAPPING_WITHOUT_PREFIX_AND_COLON__VALUE);

    mappingWithPrefixAndEqualEClass = createEClass(MAPPING_WITH_PREFIX_AND_EQUAL);
    createEAttribute(mappingWithPrefixAndEqualEClass, MAPPING_WITH_PREFIX_AND_EQUAL__NAME);
    createEAttribute(mappingWithPrefixAndEqualEClass, MAPPING_WITH_PREFIX_AND_EQUAL__VALUE);

    mappingWithoutPrefixAndEqualEClass = createEClass(MAPPING_WITHOUT_PREFIX_AND_EQUAL);
    createEAttribute(mappingWithoutPrefixAndEqualEClass, MAPPING_WITHOUT_PREFIX_AND_EQUAL__NAME);
    createEAttribute(mappingWithoutPrefixAndEqualEClass, MAPPING_WITHOUT_PREFIX_AND_EQUAL__VALUE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    buildLongSyntaxEClass.getESuperTypes().add(this.getBuild());
    deployConfigsLongSyntaxEClass.getESuperTypes().add(this.getDeployConfigs());
    configEClass.getESuperTypes().add(this.getDeployConfigs());
    portLongSyntaxEClass.getESuperTypes().add(this.getPorts());
    serviceSecretsLongSyntaxEClass.getESuperTypes().add(this.getServiceSecrets());
    serviceVolumeLongSyntaxEClass.getESuperTypes().add(this.getServiceVolumes());
    configsEClass.getESuperTypes().add(this.getDeployConfigs());
    listEClass.getESuperTypes().add(this.getValueOrList());
    listEClass.getESuperTypes().add(this.getListOrMapping());
    mappingEClass.getESuperTypes().add(this.getListOrMapping());

    // Initialize classes and features; add operations and parameters
    initEClass(dockerComposeEClass, DockerCompose.class, "DockerCompose", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDockerCompose_Version(), ecorePackage.getEString(), "version", null, 0, 1, DockerCompose.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDockerCompose_Services(), this.getService(), null, "services", null, 0, -1, DockerCompose.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDockerCompose_Volumes(), this.getVolumes(), null, "volumes", null, 0, -1, DockerCompose.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDockerCompose_Networks(), this.getNetworks(), null, "networks", null, 0, -1, DockerCompose.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDockerCompose_Configs(), this.getConfigs(), null, "configs", null, 0, -1, DockerCompose.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDockerCompose_Secrets(), this.getSecrets(), null, "secrets", null, 0, -1, DockerCompose.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceEClass, Service.class, "Service", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getService_Name(), ecorePackage.getEString(), "name", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Build(), this.getBuild(), null, "build", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Cap_add(), this.getList(), null, "cap_add", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Cap_drop(), this.getList(), null, "cap_drop", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Cgroup_parent(), ecorePackage.getEString(), "cgroup_parent", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Command(), ecorePackage.getEString(), "command", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Container_name(), ecorePackage.getEString(), "container_name", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Credential_spec(), this.getCredentialSpec(), null, "credential_spec", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Depends_on(), this.getList(), null, "depends_on", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Deploy(), this.getDeploy(), null, "deploy", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Devices(), this.getList(), null, "devices", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Dns(), this.getList(), null, "dns", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Domainname(), ecorePackage.getEString(), "domainname", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Entrypoint(), this.getValueOrList(), null, "entrypoint", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Env_file(), this.getValueOrList(), null, "env_file", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Environment(), this.getMapping(), null, "environment", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Expose(), this.getList(), null, "expose", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_External_links(), this.getListOrMapping(), null, "external_links", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Healthcheck(), this.getHealthcheck(), null, "healthcheck", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Hostname(), ecorePackage.getEString(), "hostname", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Image(), ecorePackage.getEString(), "image", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Init(), ecorePackage.getEString(), "init", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Ipc(), ecorePackage.getEString(), "ipc", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Isolation(), ecorePackage.getEString(), "isolation", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Labels(), this.getListOrMapping(), null, "labels", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Links(), this.getListOrMapping(), null, "links", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Logging(), this.getLogging(), null, "logging", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Mac_address(), ecorePackage.getEString(), "mac_address", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Network_mode(), ecorePackage.getEString(), "network_mode", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Networks(), this.getList(), null, "networks", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Pid(), ecorePackage.getEString(), "pid", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Ports(), this.getPorts(), null, "ports", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Privileged(), ecorePackage.getEString(), "privileged", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Read_only(), ecorePackage.getEString(), "read_only", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Restart(), ecorePackage.getEString(), "restart", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Secrets(), this.getServiceSecrets(), null, "secrets", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Security_opt(), this.getList(), null, "security_opt", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Shm_size(), ecorePackage.getEString(), "shm_size", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Stdin_open(), ecorePackage.getEString(), "stdin_open", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Stop_grace_period(), ecorePackage.getEString(), "stop_grace_period", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Stop_signal(), ecorePackage.getEString(), "stop_signal", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Sysctls(), ecorePackage.getEObject(), null, "sysctls", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Tty(), ecorePackage.getEString(), "tty", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Ulimits(), this.getUlimits(), null, "ulimits", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_User(), ecorePackage.getEString(), "user", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Userns_mode(), ecorePackage.getEString(), "userns_mode", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Volumes(), this.getServiceVolumes(), null, "volumes", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Working_dir(), ecorePackage.getEString(), "working_dir", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(buildEClass, Build.class, "Build", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBuild_Build(), ecorePackage.getEString(), "build", null, 0, 1, Build.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(buildLongSyntaxEClass, BuildLongSyntax.class, "BuildLongSyntax", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBuildLongSyntax_Context(), ecorePackage.getEString(), "context", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBuildLongSyntax_Dockerfile(), ecorePackage.getEString(), "dockerfile", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBuildLongSyntax_Args(), this.getListOrMapping(), null, "args", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBuildLongSyntax_Labels(), this.getListOrMapping(), null, "labels", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBuildLongSyntax_Cache_from(), this.getListOrMapping(), null, "cache_from", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBuildLongSyntax_Network(), ecorePackage.getEString(), "network", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBuildLongSyntax_Target(), ecorePackage.getEString(), "target", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBuildLongSyntax_Shm_size(), ecorePackage.getEString(), "shm_size", null, 0, 1, BuildLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deployConfigsEClass, DeployConfigs.class, "DeployConfigs", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(deployConfigsLongSyntaxEClass, DeployConfigsLongSyntax.class, "DeployConfigsLongSyntax", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDeployConfigsLongSyntax_Source(), ecorePackage.getEString(), "source", null, 0, 1, DeployConfigsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeployConfigsLongSyntax_Target(), ecorePackage.getEString(), "target", null, 0, 1, DeployConfigsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeployConfigsLongSyntax_Uid(), ecorePackage.getEString(), "uid", null, 0, 1, DeployConfigsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeployConfigsLongSyntax_Gid(), ecorePackage.getEString(), "gid", null, 0, 1, DeployConfigsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeployConfigsLongSyntax_Mode(), ecorePackage.getEString(), "mode", null, 0, 1, DeployConfigsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(credentialSpecEClass, CredentialSpec.class, "CredentialSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCredentialSpec_File(), ecorePackage.getEString(), "file", null, 0, 1, CredentialSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCredentialSpec_Registry(), ecorePackage.getEString(), "registry", null, 0, 1, CredentialSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deployEClass, Deploy.class, "Deploy", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDeploy_Endpoint_mode(), ecorePackage.getEString(), "endpoint_mode", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeploy_Labels(), this.getMapping(), null, "labels", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeploy_Mode(), ecorePackage.getEString(), "mode", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeploy_Placement(), this.getPlacement(), null, "placement", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeploy_Replicas(), ecorePackage.getEString(), "replicas", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeploy_Resources(), ecorePackage.getEString(), "resources", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeploy_Restart_policy(), this.getRestartPolicy(), null, "restart_policy", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeploy_Rollback_config(), this.getDeployConfigs(), null, "rollback_config", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeploy_Update_config(), this.getDeployConfigs(), null, "update_config", null, 0, 1, Deploy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(placementEClass, Placement.class, "Placement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPlacement_Constraints(), this.getValueOrList(), null, "constraints", null, 0, 1, Placement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPlacement_Preferences(), this.getListOrMapping(), null, "preferences", null, 0, 1, Placement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(restartPolicyEClass, RestartPolicy.class, "RestartPolicy", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRestartPolicy_Condition(), ecorePackage.getEString(), "condition", null, 0, 1, RestartPolicy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRestartPolicy_Delay(), ecorePackage.getEString(), "delay", null, 0, 1, RestartPolicy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRestartPolicy_Max_attempts(), ecorePackage.getEString(), "max_attempts", null, 0, 1, RestartPolicy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRestartPolicy_Window(), ecorePackage.getEString(), "window", null, 0, 1, RestartPolicy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configEClass, Config.class, "Config", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConfig_Parallelism(), ecorePackage.getEString(), "parallelism", null, 0, 1, Config.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfig_Delay(), ecorePackage.getEString(), "delay", null, 0, 1, Config.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfig_Failure_action(), ecorePackage.getEString(), "failure_action", null, 0, 1, Config.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfig_Monitor(), ecorePackage.getEString(), "monitor", null, 0, 1, Config.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfig_Max_failure_ratio(), ecorePackage.getEString(), "max_failure_ratio", null, 0, 1, Config.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfig_Order(), ecorePackage.getEString(), "order", null, 0, 1, Config.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(healthcheckEClass, Healthcheck.class, "Healthcheck", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getHealthcheck_Disable(), ecorePackage.getEString(), "disable", null, 0, 1, Healthcheck.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHealthcheck_Interval(), ecorePackage.getEString(), "interval", null, 0, 1, Healthcheck.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHealthcheck_Retries(), ecorePackage.getEString(), "retries", null, 0, 1, Healthcheck.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHealthcheck_Test(), this.getValueOrList(), null, "test", null, 0, 1, Healthcheck.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHealthcheck_Timeout(), ecorePackage.getEString(), "timeout", null, 0, 1, Healthcheck.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHealthcheck_Start_period(), ecorePackage.getEString(), "start_period", null, 0, 1, Healthcheck.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loggingEClass, Logging.class, "Logging", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLogging_Driver(), ecorePackage.getEString(), "driver", null, 0, 1, Logging.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLogging_Options(), this.getMapping(), null, "options", null, 0, 1, Logging.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(portsEClass, Ports.class, "Ports", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPorts_Ports(), this.getList(), null, "ports", null, 0, 1, Ports.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(portLongSyntaxEClass, PortLongSyntax.class, "PortLongSyntax", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPortLongSyntax_Target(), ecorePackage.getEString(), "target", null, 0, 1, PortLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortLongSyntax_Published(), ecorePackage.getEString(), "published", null, 0, 1, PortLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortLongSyntax_Protocol(), ecorePackage.getEString(), "protocol", null, 0, 1, PortLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortLongSyntax_Mode(), ecorePackage.getEString(), "mode", null, 0, 1, PortLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceSecretsEClass, ServiceSecrets.class, "ServiceSecrets", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getServiceSecrets_Secret(), ecorePackage.getEString(), "secret", null, 0, 1, ServiceSecrets.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceSecretsLongSyntaxEClass, ServiceSecretsLongSyntax.class, "ServiceSecretsLongSyntax", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getServiceSecretsLongSyntax_Source(), ecorePackage.getEString(), "source", null, 0, 1, ServiceSecretsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceSecretsLongSyntax_Target(), ecorePackage.getEString(), "target", null, 0, 1, ServiceSecretsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceSecretsLongSyntax_Uid(), ecorePackage.getEString(), "uid", null, 0, 1, ServiceSecretsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceSecretsLongSyntax_Gid(), ecorePackage.getEString(), "gid", null, 0, 1, ServiceSecretsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceSecretsLongSyntax_Mode(), ecorePackage.getEString(), "mode", null, 0, 1, ServiceSecretsLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ulimitsEClass, Ulimits.class, "Ulimits", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUlimits_Name(), ecorePackage.getEString(), "name", null, 0, 1, Ulimits.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getUlimits_Value(), ecorePackage.getEString(), "value", null, 0, 1, Ulimits.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getUlimits_Soft(), ecorePackage.getEString(), "soft", null, 0, 1, Ulimits.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getUlimits_Hard(), ecorePackage.getEString(), "hard", null, 0, 1, Ulimits.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceVolumesEClass, ServiceVolumes.class, "ServiceVolumes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getServiceVolumes_Volumes(), ecorePackage.getEString(), "volumes", null, 0, 1, ServiceVolumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceVolumeLongSyntaxEClass, ServiceVolumeLongSyntax.class, "ServiceVolumeLongSyntax", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getServiceVolumeLongSyntax_Type(), ecorePackage.getEString(), "type", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_Source(), ecorePackage.getEString(), "source", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_Target(), ecorePackage.getEString(), "target", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_Read_only(), ecorePackage.getEString(), "read_only", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_Consistency(), ecorePackage.getEString(), "consistency", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_BindPropagation(), ecorePackage.getEString(), "bindPropagation", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_VolumeNocopy(), ecorePackage.getEString(), "volumeNocopy", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServiceVolumeLongSyntax_TmpfsSize(), ecorePackage.getEString(), "tmpfsSize", null, 0, 1, ServiceVolumeLongSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(volumesEClass, Volumes.class, "Volumes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVolumes_Name(), ecorePackage.getEString(), "name", null, 0, 1, Volumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVolumes_Driver(), ecorePackage.getEString(), "driver", null, 0, 1, Volumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVolumes_Driver_opts(), this.getMapping(), null, "driver_opts", null, 0, 1, Volumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVolumes_External(), ecorePackage.getEString(), "external", null, 0, 1, Volumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVolumes_Labels(), this.getListOrMapping(), null, "labels", null, 0, 1, Volumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVolumes_CustomName(), ecorePackage.getEString(), "customName", null, 0, 1, Volumes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(networksEClass, Networks.class, "Networks", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNetworks_Name(), ecorePackage.getEString(), "name", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworks_Driver(), ecorePackage.getEString(), "driver", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNetworks_Driver_opts(), this.getMapping(), null, "driver_opts", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworks_Attachable(), ecorePackage.getEString(), "attachable", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworks_Enable_ipv6(), ecorePackage.getEString(), "enable_ipv6", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNetworks_Ipam(), this.getIpam(), null, "ipam", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworks_Internal(), ecorePackage.getEString(), "internal", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNetworks_Labels(), this.getListOrMapping(), null, "labels", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworks_External(), ecorePackage.getEString(), "external", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNetworks_CustomName(), ecorePackage.getEString(), "customName", null, 0, 1, Networks.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ipamEClass, Ipam.class, "Ipam", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIpam_Driver(), ecorePackage.getEString(), "driver", null, 0, 1, Ipam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIpam_Config(), this.getListOrMapping(), null, "config", null, 0, 1, Ipam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configsEClass, Configs.class, "Configs", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConfigs_List(), this.getListOrMapping(), null, "list", null, 0, 1, Configs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigs_Name(), ecorePackage.getEString(), "name", null, 0, 1, Configs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigs_File(), ecorePackage.getEString(), "file", null, 0, 1, Configs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigs_External(), ecorePackage.getEString(), "external", null, 0, 1, Configs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigs_CustomName(), ecorePackage.getEString(), "customName", null, 0, 1, Configs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(secretsEClass, Secrets.class, "Secrets", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSecrets_Name(), ecorePackage.getEString(), "name", null, 0, 1, Secrets.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSecrets_File(), ecorePackage.getEString(), "file", null, 0, 1, Secrets.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSecrets_External(), ecorePackage.getEString(), "external", null, 0, 1, Secrets.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSecrets_CustomName(), ecorePackage.getEString(), "customName", null, 0, 1, Secrets.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueOrListEClass, ValueOrList.class, "ValueOrList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(listOrMappingEClass, ListOrMapping.class, "ListOrMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(listEClass, List.class, "List", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getList_List(), ecorePackage.getEString(), "list", null, 0, -1, List.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingEClass, Mapping.class, "Mapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapping_Map(), ecorePackage.getEObject(), null, "map", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingWithPrefixAndColonEClass, MappingWithPrefixAndColon.class, "MappingWithPrefixAndColon", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMappingWithPrefixAndColon_Name(), ecorePackage.getEString(), "name", null, 0, 1, MappingWithPrefixAndColon.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMappingWithPrefixAndColon_Value(), ecorePackage.getEString(), "value", null, 0, 1, MappingWithPrefixAndColon.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingWithoutPrefixAndColonEClass, MappingWithoutPrefixAndColon.class, "MappingWithoutPrefixAndColon", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMappingWithoutPrefixAndColon_Name(), ecorePackage.getEString(), "name", null, 0, 1, MappingWithoutPrefixAndColon.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMappingWithoutPrefixAndColon_Value(), ecorePackage.getEString(), "value", null, 0, 1, MappingWithoutPrefixAndColon.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingWithPrefixAndEqualEClass, MappingWithPrefixAndEqual.class, "MappingWithPrefixAndEqual", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMappingWithPrefixAndEqual_Name(), ecorePackage.getEString(), "name", null, 0, 1, MappingWithPrefixAndEqual.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMappingWithPrefixAndEqual_Value(), ecorePackage.getEString(), "value", null, 0, 1, MappingWithPrefixAndEqual.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingWithoutPrefixAndEqualEClass, MappingWithoutPrefixAndEqual.class, "MappingWithoutPrefixAndEqual", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMappingWithoutPrefixAndEqual_Name(), ecorePackage.getEString(), "name", null, 0, 1, MappingWithoutPrefixAndEqual.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMappingWithoutPrefixAndEqual_Value(), ecorePackage.getEString(), "value", null, 0, 1, MappingWithoutPrefixAndEqual.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //ComposeFilePackageImpl
