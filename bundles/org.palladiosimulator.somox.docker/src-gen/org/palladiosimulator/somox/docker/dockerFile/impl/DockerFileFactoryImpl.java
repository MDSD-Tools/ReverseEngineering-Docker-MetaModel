/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.dockerFile.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.palladiosimulator.somox.docker.dockerFile.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DockerFileFactoryImpl extends EFactoryImpl implements DockerFileFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DockerFileFactory init()
  {
    try
    {
      DockerFileFactory theDockerFileFactory = (DockerFileFactory)EPackage.Registry.INSTANCE.getEFactory(DockerFilePackage.eNS_URI);
      if (theDockerFileFactory != null)
      {
        return theDockerFileFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DockerFileFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DockerFileFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DockerFilePackage.DOCKERFILE: return createDockerfile();
      case DockerFilePackage.INSTRUCTION: return createInstruction();
      case DockerFilePackage.CMD: return createCmd();
      case DockerFilePackage.ADD_DESTINATION: return createAddDestination();
      case DockerFilePackage.ENTRYPOINT: return createEntrypoint();
      case DockerFilePackage.VOLUME: return createVolume();
      case DockerFilePackage.USER: return createUser();
      case DockerFilePackage.ONBUILD: return createOnbuild();
      case DockerFilePackage.FROM: return createFrom();
      case DockerFilePackage.MAINTAINER: return createMaintainer();
      case DockerFilePackage.ENV: return createEnv();
      case DockerFilePackage.EXPOSE: return createExpose();
      case DockerFilePackage.JSON_ARRAY: return createJSON_ARRAY();
      case DockerFilePackage.ENV_WITH_SPACE: return createEnvWithSpace();
      case DockerFilePackage.ENV_WITH_EQUAL: return createEnvWithEqual();
      case DockerFilePackage.WORKDIR: return createWorkdir();
      case DockerFilePackage.RUN: return createRun();
      case DockerFilePackage.RUN_WITH_SHELL: return createRunWithShell();
      case DockerFilePackage.RUN_WITH_NO_SHELL: return createRunWithNoShell();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dockerfile createDockerfile()
  {
    DockerfileImpl dockerfile = new DockerfileImpl();
    return dockerfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cmd createCmd()
  {
    CmdImpl cmd = new CmdImpl();
    return cmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddDestination createAddDestination()
  {
    AddDestinationImpl addDestination = new AddDestinationImpl();
    return addDestination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entrypoint createEntrypoint()
  {
    EntrypointImpl entrypoint = new EntrypointImpl();
    return entrypoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Volume createVolume()
  {
    VolumeImpl volume = new VolumeImpl();
    return volume;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public User createUser()
  {
    UserImpl user = new UserImpl();
    return user;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Onbuild createOnbuild()
  {
    OnbuildImpl onbuild = new OnbuildImpl();
    return onbuild;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public From createFrom()
  {
    FromImpl from = new FromImpl();
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Maintainer createMaintainer()
  {
    MaintainerImpl maintainer = new MaintainerImpl();
    return maintainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Env createEnv()
  {
    EnvImpl env = new EnvImpl();
    return env;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expose createExpose()
  {
    ExposeImpl expose = new ExposeImpl();
    return expose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSON_ARRAY createJSON_ARRAY()
  {
    JSON_ARRAYImpl jsoN_ARRAY = new JSON_ARRAYImpl();
    return jsoN_ARRAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvWithSpace createEnvWithSpace()
  {
    EnvWithSpaceImpl envWithSpace = new EnvWithSpaceImpl();
    return envWithSpace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvWithEqual createEnvWithEqual()
  {
    EnvWithEqualImpl envWithEqual = new EnvWithEqualImpl();
    return envWithEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workdir createWorkdir()
  {
    WorkdirImpl workdir = new WorkdirImpl();
    return workdir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Run createRun()
  {
    RunImpl run = new RunImpl();
    return run;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunWithShell createRunWithShell()
  {
    RunWithShellImpl runWithShell = new RunWithShellImpl();
    return runWithShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunWithNoShell createRunWithNoShell()
  {
    RunWithNoShellImpl runWithNoShell = new RunWithNoShellImpl();
    return runWithNoShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DockerFilePackage getDockerFilePackage()
  {
    return (DockerFilePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DockerFilePackage getPackage()
  {
    return DockerFilePackage.eINSTANCE;
  }

} //DockerFileFactoryImpl
