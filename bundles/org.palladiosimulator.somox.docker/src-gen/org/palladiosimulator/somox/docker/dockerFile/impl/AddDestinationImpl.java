/**
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.dockerFile.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.palladiosimulator.somox.docker.dockerFile.AddDestination;
import org.palladiosimulator.somox.docker.dockerFile.DockerFilePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Add Destination</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.somox.docker.dockerFile.impl.AddDestinationImpl#getSource_left <em>Source left</em>}</li>
 *   <li>{@link org.palladiosimulator.somox.docker.dockerFile.impl.AddDestinationImpl#getDest <em>Dest</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AddDestinationImpl extends InstructionImpl implements AddDestination
{
  /**
   * The default value of the '{@link #getSource_left() <em>Source left</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource_left()
   * @generated
   * @ordered
   */
  protected static final String SOURCE_LEFT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSource_left() <em>Source left</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource_left()
   * @generated
   * @ordered
   */
  protected String source_left = SOURCE_LEFT_EDEFAULT;

  /**
   * The default value of the '{@link #getDest() <em>Dest</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDest()
   * @generated
   * @ordered
   */
  protected static final String DEST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDest() <em>Dest</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDest()
   * @generated
   * @ordered
   */
  protected String dest = DEST_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AddDestinationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerFilePackage.Literals.ADD_DESTINATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSource_left()
  {
    return source_left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource_left(String newSource_left)
  {
    String oldSource_left = source_left;
    source_left = newSource_left;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerFilePackage.ADD_DESTINATION__SOURCE_LEFT, oldSource_left, source_left));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDest()
  {
    return dest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDest(String newDest)
  {
    String oldDest = dest;
    dest = newDest;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerFilePackage.ADD_DESTINATION__DEST, oldDest, dest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerFilePackage.ADD_DESTINATION__SOURCE_LEFT:
        return getSource_left();
      case DockerFilePackage.ADD_DESTINATION__DEST:
        return getDest();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerFilePackage.ADD_DESTINATION__SOURCE_LEFT:
        setSource_left((String)newValue);
        return;
      case DockerFilePackage.ADD_DESTINATION__DEST:
        setDest((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerFilePackage.ADD_DESTINATION__SOURCE_LEFT:
        setSource_left(SOURCE_LEFT_EDEFAULT);
        return;
      case DockerFilePackage.ADD_DESTINATION__DEST:
        setDest(DEST_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerFilePackage.ADD_DESTINATION__SOURCE_LEFT:
        return SOURCE_LEFT_EDEFAULT == null ? source_left != null : !SOURCE_LEFT_EDEFAULT.equals(source_left);
      case DockerFilePackage.ADD_DESTINATION__DEST:
        return DEST_EDEFAULT == null ? dest != null : !DEST_EDEFAULT.equals(dest);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (source_left: ");
    result.append(source_left);
    result.append(", dest: ");
    result.append(dest);
    result.append(')');
    return result.toString();
  }

} //AddDestinationImpl
