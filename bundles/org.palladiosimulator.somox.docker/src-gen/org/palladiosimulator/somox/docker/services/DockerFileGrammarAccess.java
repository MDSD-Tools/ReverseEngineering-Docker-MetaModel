/*
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.somox.docker.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DockerFileGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DockerfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Dockerfile");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//Dockerfile:
		//	instructions+=Instruction+;
		@Override public ParserRule getRule() { return rule; }
		
		//instructions+=Instruction+
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0() { return cInstructionsInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCmdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCopyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEntrypointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExposeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnvParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFromParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMaintainerParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOnbuildParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRunParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cUserParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVolumeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWorkdirParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Instruction:
		//	Add | Cmd | Copy | Entrypoint | Expose | Env | From | Maintainer | Onbuild | Run | User | Volume | Workdir;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | Cmd | Copy | Entrypoint | Expose | Env | From | Maintainer | Onbuild | Run | User | Volume | Workdir
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//Cmd
		public RuleCall getCmdParserRuleCall_1() { return cCmdParserRuleCall_1; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_2() { return cCopyParserRuleCall_2; }
		
		//Entrypoint
		public RuleCall getEntrypointParserRuleCall_3() { return cEntrypointParserRuleCall_3; }
		
		//Expose
		public RuleCall getExposeParserRuleCall_4() { return cExposeParserRuleCall_4; }
		
		//Env
		public RuleCall getEnvParserRuleCall_5() { return cEnvParserRuleCall_5; }
		
		//From
		public RuleCall getFromParserRuleCall_6() { return cFromParserRuleCall_6; }
		
		//Maintainer
		public RuleCall getMaintainerParserRuleCall_7() { return cMaintainerParserRuleCall_7; }
		
		//Onbuild
		public RuleCall getOnbuildParserRuleCall_8() { return cOnbuildParserRuleCall_8; }
		
		//Run
		public RuleCall getRunParserRuleCall_9() { return cRunParserRuleCall_9; }
		
		//User
		public RuleCall getUserParserRuleCall_10() { return cUserParserRuleCall_10; }
		
		//Volume
		public RuleCall getVolumeParserRuleCall_11() { return cVolumeParserRuleCall_11; }
		
		//Workdir
		public RuleCall getWorkdirParserRuleCall_12() { return cWorkdirParserRuleCall_12; }
	}
	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Cmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCMDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJSON_ARRAYParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cCmdAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Cmd:
		//	'CMD' (JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER);
		@Override public ParserRule getRule() { return rule; }
		
		//'CMD' (JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER)
		public Group getGroup() { return cGroup; }
		
		//'CMD'
		public Keyword getCMDKeyword_0() { return cCMDKeyword_0; }
		
		//(JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//JSON_ARRAY
		public RuleCall getJSON_ARRAYParserRuleCall_1_0() { return cJSON_ARRAYParserRuleCall_1_0; }
		
		//{Cmd} ONE_SPACE_AND_WHATEVER
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Cmd}
		public Action getCmdAction_1_1_0() { return cCmdAction_1_1_0; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1() { return cONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOPYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJSON_ARRAYParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSource_leftAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSource_leftAddSourceParserRuleCall_1_1_0_0 = (RuleCall)cSource_leftAssignment_1_1_0.eContents().get(0);
		private final Assignment cDestAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDestONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1_0 = (RuleCall)cDestAssignment_1_1_1.eContents().get(0);
		
		//Copy AddDestination:
		//	'COPY' (JSON_ARRAY | source_left=AddSource dest=ONE_SPACE_AND_WHATEVER);
		@Override public ParserRule getRule() { return rule; }
		
		//'COPY' (JSON_ARRAY | source_left=AddSource dest=ONE_SPACE_AND_WHATEVER)
		public Group getGroup() { return cGroup; }
		
		//'COPY'
		public Keyword getCOPYKeyword_0() { return cCOPYKeyword_0; }
		
		//(JSON_ARRAY | source_left=AddSource dest=ONE_SPACE_AND_WHATEVER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//JSON_ARRAY
		public RuleCall getJSON_ARRAYParserRuleCall_1_0() { return cJSON_ARRAYParserRuleCall_1_0; }
		
		//source_left=AddSource dest=ONE_SPACE_AND_WHATEVER
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//source_left=AddSource
		public Assignment getSource_leftAssignment_1_1_0() { return cSource_leftAssignment_1_1_0; }
		
		//AddSource
		public RuleCall getSource_leftAddSourceParserRuleCall_1_1_0_0() { return cSource_leftAddSourceParserRuleCall_1_1_0_0; }
		
		//dest=ONE_SPACE_AND_WHATEVER
		public Assignment getDestAssignment_1_1_1() { return cDestAssignment_1_1_1; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getDestONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1_0() { return cDestONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1_0; }
	}
	public class EntrypointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Entrypoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENTRYPOINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJSON_ARRAYParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cCmdAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Entrypoint:
		//	'ENTRYPOINT' (JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER);
		@Override public ParserRule getRule() { return rule; }
		
		//'ENTRYPOINT' (JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER)
		public Group getGroup() { return cGroup; }
		
		//'ENTRYPOINT'
		public Keyword getENTRYPOINTKeyword_0() { return cENTRYPOINTKeyword_0; }
		
		//(JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//JSON_ARRAY
		public RuleCall getJSON_ARRAYParserRuleCall_1_0() { return cJSON_ARRAYParserRuleCall_1_0; }
		
		//{Cmd} ONE_SPACE_AND_WHATEVER
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Cmd}
		public Action getCmdAction_1_1_0() { return cCmdAction_1_1_0; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1() { return cONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1; }
	}
	public class VolumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Volume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVOLUMEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJSON_ARRAYParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cVolumeAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Volume:
		//	'VOLUME' (JSON_ARRAY | {Volume} ONE_SPACE_AND_WHATEVER);
		@Override public ParserRule getRule() { return rule; }
		
		//'VOLUME' (JSON_ARRAY | {Volume} ONE_SPACE_AND_WHATEVER)
		public Group getGroup() { return cGroup; }
		
		//'VOLUME'
		public Keyword getVOLUMEKeyword_0() { return cVOLUMEKeyword_0; }
		
		//(JSON_ARRAY | {Volume} ONE_SPACE_AND_WHATEVER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//JSON_ARRAY
		public RuleCall getJSON_ARRAYParserRuleCall_1_0() { return cJSON_ARRAYParserRuleCall_1_0; }
		
		//{Volume} ONE_SPACE_AND_WHATEVER
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Volume}
		public Action getVolumeAction_1_1_0() { return cVolumeAction_1_1_0; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1() { return cONE_SPACE_AND_WHATEVERTerminalRuleCall_1_1_1; }
	}
	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUSERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//User:
		//	'USER' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'USER' name=ID
		public Group getGroup() { return cGroup; }
		
		//'USER'
		public Keyword getUSERKeyword_0() { return cUSERKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class OnbuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Onbuild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cONBUILDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		
		//Onbuild:
		//	'ONBUILD' instruction=Instruction;
		@Override public ParserRule getRule() { return rule; }
		
		//'ONBUILD' instruction=Instruction
		public Group getGroup() { return cGroup; }
		
		//'ONBUILD'
		public Keyword getONBUILDKeyword_0() { return cONBUILDKeyword_0; }
		
		//instruction=Instruction
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0() { return cInstructionInstructionParserRuleCall_1_0; }
	}
	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVALID_IMAGE_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTagAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTagVALID_IMAGE_TAGParserRuleCall_2_1_0 = (RuleCall)cTagAssignment_2_1.eContents().get(0);
		
		//From:
		//	'FROM' name=VALID_IMAGE_NAME (':' tag=VALID_IMAGE_TAG)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' name=VALID_IMAGE_NAME (':' tag=VALID_IMAGE_TAG)?
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//name=VALID_IMAGE_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VALID_IMAGE_NAME
		public RuleCall getNameVALID_IMAGE_NAMEParserRuleCall_1_0() { return cNameVALID_IMAGE_NAMEParserRuleCall_1_0; }
		
		//(':' tag=VALID_IMAGE_TAG)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//tag=VALID_IMAGE_TAG
		public Assignment getTagAssignment_2_1() { return cTagAssignment_2_1; }
		
		//VALID_IMAGE_TAG
		public RuleCall getTagVALID_IMAGE_TAGParserRuleCall_2_1_0() { return cTagVALID_IMAGE_TAGParserRuleCall_2_1_0; }
	}
	public class MaintainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Maintainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAINTAINERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Maintainer:
		//	'MAINTAINER' name=ONE_SPACE_AND_WHATEVER;
		@Override public ParserRule getRule() { return rule; }
		
		//'MAINTAINER' name=ONE_SPACE_AND_WHATEVER
		public Group getGroup() { return cGroup; }
		
		//'MAINTAINER'
		public Keyword getMAINTAINERKeyword_0() { return cMAINTAINERKeyword_0; }
		
		//name=ONE_SPACE_AND_WHATEVER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getNameONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0() { return cNameONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0; }
	}
	public class EnvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Env");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cEnvWithSpaceParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cEnvWithEqualParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Env:
		//	'ENV' (EnvWithSpace | EnvWithEqual);
		@Override public ParserRule getRule() { return rule; }
		
		//'ENV' (EnvWithSpace | EnvWithEqual)
		public Group getGroup() { return cGroup; }
		
		//'ENV'
		public Keyword getENVKeyword_0() { return cENVKeyword_0; }
		
		//(EnvWithSpace | EnvWithEqual)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//EnvWithSpace
		public RuleCall getEnvWithSpaceParserRuleCall_1_0() { return cEnvWithSpaceParserRuleCall_1_0; }
		
		//EnvWithEqual
		public RuleCall getEnvWithEqualParserRuleCall_1_1() { return cEnvWithEqualParserRuleCall_1_1; }
	}
	public class ExposeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Expose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPOSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortsONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0 = (RuleCall)cPortsAssignment_1.eContents().get(0);
		
		//Expose:
		//	'EXPOSE' ports=ONE_SPACE_AND_WHATEVER;
		@Override public ParserRule getRule() { return rule; }
		
		//'EXPOSE' ports=ONE_SPACE_AND_WHATEVER
		public Group getGroup() { return cGroup; }
		
		//'EXPOSE'
		public Keyword getEXPOSEKeyword_0() { return cEXPOSEKeyword_0; }
		
		//ports=ONE_SPACE_AND_WHATEVER
		public Assignment getPortsAssignment_1() { return cPortsAssignment_1; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getPortsONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0() { return cPortsONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0; }
	}
	public class JSON_ARRAYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.JSON_ARRAY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadSTRINGTerminalRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailSTRING_PREFIXED_WITH_COMMAParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JSON_ARRAY:
		//	'[' head=STRING tail+=STRING_PREFIXED_WITH_COMMA* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' head=STRING tail+=STRING_PREFIXED_WITH_COMMA* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//head=STRING
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }
		
		//STRING
		public RuleCall getHeadSTRINGTerminalRuleCall_1_0() { return cHeadSTRINGTerminalRuleCall_1_0; }
		
		//tail+=STRING_PREFIXED_WITH_COMMA*
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }
		
		//STRING_PREFIXED_WITH_COMMA
		public RuleCall getTailSTRING_PREFIXED_WITH_COMMAParserRuleCall_2_0() { return cTailSTRING_PREFIXED_WITH_COMMAParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EnvWithSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.EnvWithSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////Expose:
		//// 'EXPOSE' (ports+=Addition)
		////;
		////INT_LIST_WITH_COMMA_SEPARATOR:
		//// 'EXPOSE' (',' ports+=INT)+
		////;
		////
		////INT_LIST_WITH_SPACE_SEPARATOR:
		//// (ports+=INT)+
		////;
		////
		////
		////
		////ExposePorts hidden(ML_COMMENT):
		////  {ExposePorts} (INT_PREFIXED_BY_SPACE)+ 
		////;
		////
		////Addition returns Expression:
		////  Primary ({Addition.left=current} right=Primary)*;
		////  
		////Primary returns Expression:
		////  (NumberLiteral | {Expression}' ' INT)
		////;
		////  
		////NumberLiteral:
		////  value=INT;
		//EnvWithSpace:
		//	key+=ID value+=ONE_SPACE_AND_WHATEVER;
		@Override public ParserRule getRule() { return rule; }
		
		//key+=ID value+=ONE_SPACE_AND_WHATEVER
		public Group getGroup() { return cGroup; }
		
		//key+=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//value+=ONE_SPACE_AND_WHATEVER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getValueONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0() { return cValueONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0; }
	}
	public class EnvWithEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.EnvWithEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueENV_VALUE_WITH_EQUALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//EnvWithEqual:
		//	(key+=ID value+=ENV_VALUE_WITH_EQUAL)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(key+=ID value+=ENV_VALUE_WITH_EQUAL)+
		public Group getGroup() { return cGroup; }
		
		//key+=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//value+=ENV_VALUE_WITH_EQUAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ENV_VALUE_WITH_EQUAL
		public RuleCall getValueENV_VALUE_WITH_EQUALTerminalRuleCall_1_0() { return cValueENV_VALUE_WITH_EQUALTerminalRuleCall_1_0; }
	}
	public class WorkdirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Workdir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWORKDIRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Workdir:
		//	'WORKDIR' path=ONE_SPACE_AND_WHATEVER;
		@Override public ParserRule getRule() { return rule; }
		
		//'WORKDIR' path=ONE_SPACE_AND_WHATEVER
		public Group getGroup() { return cGroup; }
		
		//'WORKDIR'
		public Keyword getWORKDIRKeyword_0() { return cWORKDIRKeyword_0; }
		
		//path=ONE_SPACE_AND_WHATEVER
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getPathONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0() { return cPathONE_SPACE_AND_WHATEVERTerminalRuleCall_1_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSource_leftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSource_leftAddSourceParserRuleCall_1_0 = (RuleCall)cSource_leftAssignment_1.eContents().get(0);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestONE_SPACE_AND_WHATEVERTerminalRuleCall_2_0 = (RuleCall)cDestAssignment_2.eContents().get(0);
		
		//Add AddDestination:
		//	'ADD' source_left=AddSource dest=ONE_SPACE_AND_WHATEVER;
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD' source_left=AddSource dest=ONE_SPACE_AND_WHATEVER
		public Group getGroup() { return cGroup; }
		
		//'ADD'
		public Keyword getADDKeyword_0() { return cADDKeyword_0; }
		
		//source_left=AddSource
		public Assignment getSource_leftAssignment_1() { return cSource_leftAssignment_1; }
		
		//AddSource
		public RuleCall getSource_leftAddSourceParserRuleCall_1_0() { return cSource_leftAddSourceParserRuleCall_1_0; }
		
		//dest=ONE_SPACE_AND_WHATEVER
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getDestONE_SPACE_AND_WHATEVERTerminalRuleCall_2_0() { return cDestONE_SPACE_AND_WHATEVERTerminalRuleCall_2_0; }
	}
	public class AddSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.AddSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVALID_RELATIVE_PATHParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVALID_URLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//AddSource:
		//	VALID_RELATIVE_PATH | VALID_URL | '.';
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_RELATIVE_PATH | VALID_URL | '.'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VALID_RELATIVE_PATH
		public RuleCall getVALID_RELATIVE_PATHParserRuleCall_0() { return cVALID_RELATIVE_PATHParserRuleCall_0; }
		
		//VALID_URL
		public RuleCall getVALID_URLParserRuleCall_1() { return cVALID_URLParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.Run");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRUNKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRunWithShellParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cRunWithNoShellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////AddDestination:
		////  VALID_PATH
		////;
		//Run:
		//	'RUN' RunWithShell | RunWithNoShell;
		@Override public ParserRule getRule() { return rule; }
		
		//'RUN' RunWithShell | RunWithNoShell
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'RUN' RunWithShell
		public Group getGroup_0() { return cGroup_0; }
		
		//'RUN'
		public Keyword getRUNKeyword_0_0() { return cRUNKeyword_0_0; }
		
		//RunWithShell
		public RuleCall getRunWithShellParserRuleCall_0_1() { return cRunWithShellParserRuleCall_0_1; }
		
		//RunWithNoShell
		public RuleCall getRunWithNoShellParserRuleCall_1() { return cRunWithNoShellParserRuleCall_1; }
	}
	public class RunWithShellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.RunWithShell");
		private final Assignment cCommandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandONE_SPACE_AND_WHATEVERTerminalRuleCall_0 = (RuleCall)cCommandAssignment.eContents().get(0);
		
		//RunWithShell:
		//	command=ONE_SPACE_AND_WHATEVER;
		@Override public ParserRule getRule() { return rule; }
		
		//command=ONE_SPACE_AND_WHATEVER
		public Assignment getCommandAssignment() { return cCommandAssignment; }
		
		//ONE_SPACE_AND_WHATEVER
		public RuleCall getCommandONE_SPACE_AND_WHATEVERTerminalRuleCall_0() { return cCommandONE_SPACE_AND_WHATEVERTerminalRuleCall_0; }
	}
	public class RunWithNoShellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.RunWithNoShell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExecutableSTRINGTerminalRuleCall_1_0 = (RuleCall)cExecutableAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsSTRING_PREFIXED_WITH_COMMAParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RunWithNoShell:
		//	'[' executable=STRING params+=STRING_PREFIXED_WITH_COMMA* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' executable=STRING params+=STRING_PREFIXED_WITH_COMMA* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//executable=STRING
		public Assignment getExecutableAssignment_1() { return cExecutableAssignment_1; }
		
		//STRING
		public RuleCall getExecutableSTRINGTerminalRuleCall_1_0() { return cExecutableSTRINGTerminalRuleCall_1_0; }
		
		//params+=STRING_PREFIXED_WITH_COMMA*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//STRING_PREFIXED_WITH_COMMA
		public RuleCall getParamsSTRING_PREFIXED_WITH_COMMAParserRuleCall_2_0() { return cParamsSTRING_PREFIXED_WITH_COMMAParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class STRING_PREFIXED_WITH_COMMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.STRING_PREFIXED_WITH_COMMA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//STRING_PREFIXED_WITH_COMMA:
		//	',' STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//',' STRING
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class VALID_RELATIVE_PATHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.VALID_RELATIVE_PATH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSolidusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VALID_RELATIVE_PATH:
		//	(ID ('/' ID)*) '*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID ('/' ID)*) '*'?
		public Group getGroup() { return cGroup; }
		
		//(ID ('/' ID)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//('/' ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_0_1_0() { return cSolidusKeyword_0_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }
		
		//'*'?
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class VALID_URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.VALID_URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHttpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cSolidusKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//VALID_URL:
		//	'http://' ID (('/' | '.') ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'http://' ID (('/' | '.') ID)*
		public Group getGroup() { return cGroup; }
		
		//'http://'
		public Keyword getHttpKeyword_0() { return cHttpKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//(('/' | '.') ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//('/' | '.')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0_0() { return cSolidusKeyword_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_1() { return cFullStopKeyword_2_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	public class INT_PREFIXED_BY_SPACEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.INT_PREFIXED_BY_SPACE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSpaceKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLineFeedKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cCarriageReturnKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//INT_PREFIXED_BY_SPACE:
		//	INT (' ' | '\n' | '\r');
		@Override public ParserRule getRule() { return rule; }
		
		//INT (' ' | '\n' | '\r')
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//(' ' | '\n' | '\r')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//' '
		public Keyword getSpaceKeyword_1_0() { return cSpaceKeyword_1_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_1_1() { return cLineFeedKeyword_1_1; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_1_2() { return cCarriageReturnKeyword_1_2; }
	}
	public class VALID_IMAGE_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.VALID_IMAGE_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//VALID_IMAGE_NAME:
		//	ID ('/' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('/' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('/' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class VALID_IMAGE_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.VALID_IMAGE_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cFullStopKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		
		//VALID_IMAGE_TAG:
		//	(ID | INT | STRING) (ID | INT | STRING | '-' | '.')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | INT | STRING) (ID | INT | STRING | '-' | '.')*
		public Group getGroup() { return cGroup; }
		
		//(ID | INT | STRING)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }
		
		//(ID | INT | STRING | '-' | '.')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_3() { return cHyphenMinusKeyword_1_3; }
		
		//'.'
		public Keyword getFullStopKeyword_1_4() { return cFullStopKeyword_1_4; }
	}
	
	
	private final DockerfileElements pDockerfile;
	private final InstructionElements pInstruction;
	private final CmdElements pCmd;
	private final CopyElements pCopy;
	private final EntrypointElements pEntrypoint;
	private final VolumeElements pVolume;
	private final UserElements pUser;
	private final OnbuildElements pOnbuild;
	private final FromElements pFrom;
	private final MaintainerElements pMaintainer;
	private final EnvElements pEnv;
	private final ExposeElements pExpose;
	private final JSON_ARRAYElements pJSON_ARRAY;
	private final EnvWithSpaceElements pEnvWithSpace;
	private final EnvWithEqualElements pEnvWithEqual;
	private final WorkdirElements pWorkdir;
	private final AddElements pAdd;
	private final AddSourceElements pAddSource;
	private final RunElements pRun;
	private final RunWithShellElements pRunWithShell;
	private final RunWithNoShellElements pRunWithNoShell;
	private final STRING_PREFIXED_WITH_COMMAElements pSTRING_PREFIXED_WITH_COMMA;
	private final VALID_RELATIVE_PATHElements pVALID_RELATIVE_PATH;
	private final VALID_URLElements pVALID_URL;
	private final INT_PREFIXED_BY_SPACEElements pINT_PREFIXED_BY_SPACE;
	private final VALID_IMAGE_NAMEElements pVALID_IMAGE_NAME;
	private final VALID_IMAGE_TAGElements pVALID_IMAGE_TAG;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tONE_SPACE_AND_WHATEVER;
	private final TerminalRule tENV_VALUE_WITH_EQUAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DockerFileGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDockerfile = new DockerfileElements();
		this.pInstruction = new InstructionElements();
		this.pCmd = new CmdElements();
		this.pCopy = new CopyElements();
		this.pEntrypoint = new EntrypointElements();
		this.pVolume = new VolumeElements();
		this.pUser = new UserElements();
		this.pOnbuild = new OnbuildElements();
		this.pFrom = new FromElements();
		this.pMaintainer = new MaintainerElements();
		this.pEnv = new EnvElements();
		this.pExpose = new ExposeElements();
		this.pJSON_ARRAY = new JSON_ARRAYElements();
		this.pEnvWithSpace = new EnvWithSpaceElements();
		this.pEnvWithEqual = new EnvWithEqualElements();
		this.pWorkdir = new WorkdirElements();
		this.pAdd = new AddElements();
		this.pAddSource = new AddSourceElements();
		this.pRun = new RunElements();
		this.pRunWithShell = new RunWithShellElements();
		this.pRunWithNoShell = new RunWithNoShellElements();
		this.pSTRING_PREFIXED_WITH_COMMA = new STRING_PREFIXED_WITH_COMMAElements();
		this.pVALID_RELATIVE_PATH = new VALID_RELATIVE_PATHElements();
		this.pVALID_URL = new VALID_URLElements();
		this.pINT_PREFIXED_BY_SPACE = new INT_PREFIXED_BY_SPACEElements();
		this.pVALID_IMAGE_NAME = new VALID_IMAGE_NAMEElements();
		this.pVALID_IMAGE_TAG = new VALID_IMAGE_TAGElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.SL_COMMENT");
		this.tONE_SPACE_AND_WHATEVER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.ONE_SPACE_AND_WHATEVER");
		this.tENV_VALUE_WITH_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.somox.docker.DockerFile.ENV_VALUE_WITH_EQUAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.somox.docker.DockerFile".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dockerfile:
	//	instructions+=Instruction+;
	public DockerfileElements getDockerfileAccess() {
		return pDockerfile;
	}
	
	public ParserRule getDockerfileRule() {
		return getDockerfileAccess().getRule();
	}
	
	//Instruction:
	//	Add | Cmd | Copy | Entrypoint | Expose | Env | From | Maintainer | Onbuild | Run | User | Volume | Workdir;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Cmd:
	//	'CMD' (JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER);
	public CmdElements getCmdAccess() {
		return pCmd;
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}
	
	//Copy AddDestination:
	//	'COPY' (JSON_ARRAY | source_left=AddSource dest=ONE_SPACE_AND_WHATEVER);
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//Entrypoint:
	//	'ENTRYPOINT' (JSON_ARRAY | {Cmd} ONE_SPACE_AND_WHATEVER);
	public EntrypointElements getEntrypointAccess() {
		return pEntrypoint;
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}
	
	//Volume:
	//	'VOLUME' (JSON_ARRAY | {Volume} ONE_SPACE_AND_WHATEVER);
	public VolumeElements getVolumeAccess() {
		return pVolume;
	}
	
	public ParserRule getVolumeRule() {
		return getVolumeAccess().getRule();
	}
	
	//User:
	//	'USER' name=ID;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}
	
	//Onbuild:
	//	'ONBUILD' instruction=Instruction;
	public OnbuildElements getOnbuildAccess() {
		return pOnbuild;
	}
	
	public ParserRule getOnbuildRule() {
		return getOnbuildAccess().getRule();
	}
	
	//From:
	//	'FROM' name=VALID_IMAGE_NAME (':' tag=VALID_IMAGE_TAG)?;
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}
	
	//Maintainer:
	//	'MAINTAINER' name=ONE_SPACE_AND_WHATEVER;
	public MaintainerElements getMaintainerAccess() {
		return pMaintainer;
	}
	
	public ParserRule getMaintainerRule() {
		return getMaintainerAccess().getRule();
	}
	
	//Env:
	//	'ENV' (EnvWithSpace | EnvWithEqual);
	public EnvElements getEnvAccess() {
		return pEnv;
	}
	
	public ParserRule getEnvRule() {
		return getEnvAccess().getRule();
	}
	
	//Expose:
	//	'EXPOSE' ports=ONE_SPACE_AND_WHATEVER;
	public ExposeElements getExposeAccess() {
		return pExpose;
	}
	
	public ParserRule getExposeRule() {
		return getExposeAccess().getRule();
	}
	
	//JSON_ARRAY:
	//	'[' head=STRING tail+=STRING_PREFIXED_WITH_COMMA* ']';
	public JSON_ARRAYElements getJSON_ARRAYAccess() {
		return pJSON_ARRAY;
	}
	
	public ParserRule getJSON_ARRAYRule() {
		return getJSON_ARRAYAccess().getRule();
	}
	
	////Expose:
	//// 'EXPOSE' (ports+=Addition)
	////;
	////INT_LIST_WITH_COMMA_SEPARATOR:
	//// 'EXPOSE' (',' ports+=INT)+
	////;
	////
	////INT_LIST_WITH_SPACE_SEPARATOR:
	//// (ports+=INT)+
	////;
	////
	////
	////
	////ExposePorts hidden(ML_COMMENT):
	////  {ExposePorts} (INT_PREFIXED_BY_SPACE)+ 
	////;
	////
	////Addition returns Expression:
	////  Primary ({Addition.left=current} right=Primary)*;
	////  
	////Primary returns Expression:
	////  (NumberLiteral | {Expression}' ' INT)
	////;
	////  
	////NumberLiteral:
	////  value=INT;
	//EnvWithSpace:
	//	key+=ID value+=ONE_SPACE_AND_WHATEVER;
	public EnvWithSpaceElements getEnvWithSpaceAccess() {
		return pEnvWithSpace;
	}
	
	public ParserRule getEnvWithSpaceRule() {
		return getEnvWithSpaceAccess().getRule();
	}
	
	//EnvWithEqual:
	//	(key+=ID value+=ENV_VALUE_WITH_EQUAL)+;
	public EnvWithEqualElements getEnvWithEqualAccess() {
		return pEnvWithEqual;
	}
	
	public ParserRule getEnvWithEqualRule() {
		return getEnvWithEqualAccess().getRule();
	}
	
	//Workdir:
	//	'WORKDIR' path=ONE_SPACE_AND_WHATEVER;
	public WorkdirElements getWorkdirAccess() {
		return pWorkdir;
	}
	
	public ParserRule getWorkdirRule() {
		return getWorkdirAccess().getRule();
	}
	
	//Add AddDestination:
	//	'ADD' source_left=AddSource dest=ONE_SPACE_AND_WHATEVER;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//AddSource:
	//	VALID_RELATIVE_PATH | VALID_URL | '.';
	public AddSourceElements getAddSourceAccess() {
		return pAddSource;
	}
	
	public ParserRule getAddSourceRule() {
		return getAddSourceAccess().getRule();
	}
	
	////AddDestination:
	////  VALID_PATH
	////;
	//Run:
	//	'RUN' RunWithShell | RunWithNoShell;
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//RunWithShell:
	//	command=ONE_SPACE_AND_WHATEVER;
	public RunWithShellElements getRunWithShellAccess() {
		return pRunWithShell;
	}
	
	public ParserRule getRunWithShellRule() {
		return getRunWithShellAccess().getRule();
	}
	
	//RunWithNoShell:
	//	'[' executable=STRING params+=STRING_PREFIXED_WITH_COMMA* ']';
	public RunWithNoShellElements getRunWithNoShellAccess() {
		return pRunWithNoShell;
	}
	
	public ParserRule getRunWithNoShellRule() {
		return getRunWithNoShellAccess().getRule();
	}
	
	//STRING_PREFIXED_WITH_COMMA:
	//	',' STRING;
	public STRING_PREFIXED_WITH_COMMAElements getSTRING_PREFIXED_WITH_COMMAAccess() {
		return pSTRING_PREFIXED_WITH_COMMA;
	}
	
	public ParserRule getSTRING_PREFIXED_WITH_COMMARule() {
		return getSTRING_PREFIXED_WITH_COMMAAccess().getRule();
	}
	
	//VALID_RELATIVE_PATH:
	//	(ID ('/' ID)*) '*'?;
	public VALID_RELATIVE_PATHElements getVALID_RELATIVE_PATHAccess() {
		return pVALID_RELATIVE_PATH;
	}
	
	public ParserRule getVALID_RELATIVE_PATHRule() {
		return getVALID_RELATIVE_PATHAccess().getRule();
	}
	
	//VALID_URL:
	//	'http://' ID (('/' | '.') ID)*;
	public VALID_URLElements getVALID_URLAccess() {
		return pVALID_URL;
	}
	
	public ParserRule getVALID_URLRule() {
		return getVALID_URLAccess().getRule();
	}
	
	//INT_PREFIXED_BY_SPACE:
	//	INT (' ' | '\n' | '\r');
	public INT_PREFIXED_BY_SPACEElements getINT_PREFIXED_BY_SPACEAccess() {
		return pINT_PREFIXED_BY_SPACE;
	}
	
	public ParserRule getINT_PREFIXED_BY_SPACERule() {
		return getINT_PREFIXED_BY_SPACEAccess().getRule();
	}
	
	//VALID_IMAGE_NAME:
	//	ID ('/' ID)*;
	public VALID_IMAGE_NAMEElements getVALID_IMAGE_NAMEAccess() {
		return pVALID_IMAGE_NAME;
	}
	
	public ParserRule getVALID_IMAGE_NAMERule() {
		return getVALID_IMAGE_NAMEAccess().getRule();
	}
	
	//VALID_IMAGE_TAG:
	//	(ID | INT | STRING) (ID | INT | STRING | '-' | '.')*;
	public VALID_IMAGE_TAGElements getVALID_IMAGE_TAGAccess() {
		return pVALID_IMAGE_TAG;
	}
	
	public ParserRule getVALID_IMAGE_TAGRule() {
		return getVALID_IMAGE_TAGAccess().getRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ONE_SPACE_AND_WHATEVER:
	//	' ' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getONE_SPACE_AND_WHATEVERRule() {
		return tONE_SPACE_AND_WHATEVER;
	}
	
	//terminal ENV_VALUE_WITH_EQUAL:
	//	'=' !('\n' | '\r' | ' ')* ' '?;
	public TerminalRule getENV_VALUE_WITH_EQUALRule() {
		return tENV_VALUE_WITH_EQUAL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
